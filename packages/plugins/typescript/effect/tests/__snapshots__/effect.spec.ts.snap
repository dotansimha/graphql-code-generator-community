// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`effect sdk Should generate the correct content 1`] = `
"export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
import { Context, Data, Effect, Layer } from 'effect';
import { DocumentNode, ExecutionResult, print } from 'graphql';
import * as Http from '@effect/platform/HttpClient';
import gql from 'graphql-tag';
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Query = {
  __typename?: 'Query';
  /** A feed of repository submissions */
  feed?: Maybe<Array<Maybe<Entry>>>;
  /** A single entry */
  entry?: Maybe<Entry>;
  /** Return the currently logged in user, or null if nobody is logged in */
  currentUser?: Maybe<User>;
};


export type QueryFeedArgs = {
  type: FeedType;
  offset?: InputMaybe<Scalars['Int']>;
  limit?: InputMaybe<Scalars['Int']>;
};


export type QueryEntryArgs = {
  repoFullName: Scalars['String'];
};

/** A list of options for the sort order of the feed */
export enum FeedType {
  /** Sort by a combination of freshness and score, using Reddit's algorithm */
  Hot = 'HOT',
  /** Newest entries first */
  New = 'NEW',
  /** Highest score entries first */
  Top = 'TOP'
}

/** Information about a GitHub repository submitted to GitHunt */
export type Entry = {
  __typename?: 'Entry';
  /** Information about the repository from GitHub */
  repository: Repository;
  /** The GitHub user who submitted this entry */
  postedBy: User;
  /** A timestamp of when the entry was submitted */
  createdAt: Scalars['Float'];
  /** The score of this repository, upvotes - downvotes */
  score: Scalars['Int'];
  /** The hot score of this repository */
  hotScore: Scalars['Float'];
  /** Comments posted about this repository */
  comments: Array<Maybe<Comment>>;
  /** The number of comments posted about this repository */
  commentCount: Scalars['Int'];
  /** The SQL ID of this entry */
  id: Scalars['Int'];
  /** XXX to be changed */
  vote: Vote;
};


/** Information about a GitHub repository submitted to GitHunt */
export type EntryCommentsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
};

/**
 * A repository object from the GitHub API. This uses the exact field names returned by the
 * GitHub API for simplicity, even though the convention for GraphQL is usually to camel case.
 */
export type Repository = {
  __typename?: 'Repository';
  /** Just the name of the repository, e.g. GitHunt-API */
  name: Scalars['String'];
  /** The full name of the repository with the username, e.g. apollostack/GitHunt-API */
  full_name: Scalars['String'];
  /** The description of the repository */
  description?: Maybe<Scalars['String']>;
  /** The link to the repository on GitHub */
  html_url: Scalars['String'];
  /** The number of people who have starred this repository on GitHub */
  stargazers_count: Scalars['Int'];
  /** The number of open issues on this repository on GitHub */
  open_issues_count?: Maybe<Scalars['Int']>;
  /** The owner of this repository on GitHub, e.g. apollostack */
  owner?: Maybe<User>;
};

/** A user object from the GitHub API. This uses the exact field names returned from the GitHub API. */
export type User = {
  __typename?: 'User';
  /** The name of the user, e.g. apollostack */
  login: Scalars['String'];
  /** The URL to a directly embeddable image for this user's avatar */
  avatar_url: Scalars['String'];
  /** The URL of this user's GitHub page */
  html_url: Scalars['String'];
};

/** A comment about an entry, submitted by a user */
export type Comment = {
  __typename?: 'Comment';
  /** The SQL ID of this entry */
  id: Scalars['Int'];
  /** The GitHub user who posted the comment */
  postedBy: User;
  /** A timestamp of when the comment was posted */
  createdAt: Scalars['Float'];
  /** The text of the comment */
  content: Scalars['String'];
  /** The repository which this comment is about */
  repoName: Scalars['String'];
};

/** XXX to be removed */
export type Vote = {
  __typename?: 'Vote';
  vote_value: Scalars['Int'];
};

export type Mutation = {
  __typename?: 'Mutation';
  /** Submit a new repository, returns the new submission */
  submitRepository?: Maybe<Entry>;
  /** Vote on a repository submission, returns the submission that was voted on */
  vote?: Maybe<Entry>;
  /** Comment on a repository, returns the new comment */
  submitComment?: Maybe<Comment>;
};


export type MutationSubmitRepositoryArgs = {
  repoFullName: Scalars['String'];
};


export type MutationVoteArgs = {
  repoFullName: Scalars['String'];
  type: VoteType;
};


export type MutationSubmitCommentArgs = {
  repoFullName: Scalars['String'];
  commentContent: Scalars['String'];
};

/** The type of vote to record, when submitting a vote */
export enum VoteType {
  Up = 'UP',
  Down = 'DOWN',
  Cancel = 'CANCEL'
}

export type Subscription = {
  __typename?: 'Subscription';
  /** Subscription fires on every comment added */
  commentAdded?: Maybe<Comment>;
};


export type SubscriptionCommentAddedArgs = {
  repoFullName: Scalars['String'];
};
export type FeedQueryVariables = Exact<{ [key: string]: never; }>;


export type FeedQuery = { __typename?: 'Query', feed?: Array<{ __typename?: 'Entry', id: number, commentCount: number, repository: { __typename?: 'Repository', owner?: { __typename?: 'User', avatar_url: string } | null } } | null> | null };

export type Feed2QueryVariables = Exact<{
  v: Scalars['String'];
}>;


export type Feed2Query = { __typename?: 'Query', feed?: Array<{ __typename?: 'Entry', id: number } | null> | null };

export type Feed3QueryVariables = Exact<{
  v?: InputMaybe<Scalars['String']>;
}>;


export type Feed3Query = { __typename?: 'Query', feed?: Array<{ __typename?: 'Entry', id: number } | null> | null };

export type Feed4QueryVariables = Exact<{
  v?: Scalars['String'];
}>;


export type Feed4Query = { __typename?: 'Query', feed?: Array<{ __typename?: 'Entry', id: number } | null> | null };

export const FeedDocument = gql\`
    query feed {
  feed {
    id
    commentCount
    repository {
      owner {
        avatar_url
      }
    }
  }
}
    \`;
export const Feed2Document = gql\`
    query feed2($v: String!) {
  feed {
    id
  }
}
    \`;
export const Feed3Document = gql\`
    query feed3($v: String) {
  feed {
    id
  }
}
    \`;
export const Feed4Document = gql\`
    query feed4($v: String! = "TEST") {
  feed {
    id
  }
}
    \`;

export type GraphQLOperationOptions = {
  preferredOpName?: string;
};

type GraphQLOperationArgs = {
  document: DocumentNode;
  fallbackOperationName: string;
};

export type GraphQLSuccessResponse<A = any> = Pick<
  Http.response.ClientResponse,
  'status' | 'headers'
> & {
  readonly body: ExecutionResult & { readonly data: A };
};

export type GraphQLErrorResponse = Pick<Http.response.ClientResponse, 'status' | 'headers'> & {
  readonly body: Pick<ExecutionResult, 'errors' | 'extensions'>;
};

export class MissingDataGraphQLResponseError extends Data.TaggedError(
  'MissingDataGraphQLResponseError',
)<GraphQLErrorResponse> {}

const headers = {
  // https://github.com/graphql/graphql-over-http/blob/main/spec/GraphQLOverHTTP.md#legacy-watershed
  Accept: 'application/graphql-response+json; charset=utf-8, application/json; charset=utf-8',
  'Content-Type': 'application/json',
};

export class GraphQLClient extends Context.Tag('GraphQLClient')<
  GraphQLClient,
  Http.client.Client<
    never,
    Http.error.HttpClientError | MissingDataGraphQLResponseError,
    GraphQLSuccessResponse
  >
>() {
  static fromDefaultClient(client: Http.client.Client.Default): Layer.Layer<GraphQLClient> {
    return Layer.succeed(
      GraphQLClient,
      client.pipe(
        Http.client.mapRequest(Http.request.setHeaders(headers)),
        Http.client.filterStatusOk,
        Http.client.mapEffectScoped(res =>
          Effect.flatMap(res.json, _ => {
            const body = _ as ExecutionResult;
            return body.data
              ? Effect.succeed({ ...res, body: { ...body, data: body.data } })
              : Effect.fail(new MissingDataGraphQLResponseError({ ...res, body }));
          }),
        ),
      ),
    );
  }

  static Live: Layer.Layer<GraphQLClient, never, Http.client.Client.Default> = Layer.unwrapEffect(
    Effect.map(Http.client.Client, GraphQLClient.fromDefaultClient),
  );

  static fromEndpoint(
    endpoint: string,
  ): Layer.Layer<GraphQLClient, never, Http.client.Client.Default> {
    return Layer.unwrapEffect(
      Effect.map(Http.client.Client, client =>
        GraphQLClient.fromDefaultClient(
          Http.client.mapRequest(client, Http.request.prependUrl(endpoint)),
        ),
      ),
    );
  }
}

const makeGraphQLOperation =
  <Vars, Data>({ document, fallbackOperationName }: GraphQLOperationArgs) =>
  (variables: Vars, opts?: GraphQLOperationOptions) => {
    const operationName = opts?.preferredOpName ?? fallbackOperationName;
    const query = print(document);

    return Effect.flatMap(GraphQLClient, client =>
      Http.request.post('').pipe(
        Http.request.jsonBody({
          query,
          operationName,
          variables,
        }),
        Effect.flatMap(client),
        Effect.map(_ => _ as GraphQLSuccessResponse<Data>),
      ),
    );
  };

export const feed = makeGraphQLOperation<FeedQueryVariables, FeedQuery>({
  document: FeedDocument,
  fallbackOperationName: 'feed',
});
export const feed2 = makeGraphQLOperation<Feed2QueryVariables, Feed2Query>({
  document: Feed2Document,
  fallbackOperationName: 'feed2',
});
export const feed3 = makeGraphQLOperation<Feed3QueryVariables, Feed3Query>({
  document: Feed3Document,
  fallbackOperationName: 'feed3',
});
export const feed4 = makeGraphQLOperation<Feed4QueryVariables, Feed4Query>({
  document: Feed4Document,
  fallbackOperationName: 'feed4',
});

import { NodeHttpClient } from '@effect/platform-node';
import { flow } from 'effect';

const run = flow(
  Effect.provide(
    GraphQLClient.fromEndpoint('http://localhost:4000/graphql').pipe(Layer.provide(NodeHttpClient.layer)),
  ),
  Effect.runPromise
);

async function test() {
  await run(feed({}));
  await run(feed3({}));
  await run(feed4({}));

  const { body: { data } } = await run(feed2({}));

  if (data.feed) {
    if (data.feed[0]) {
      const id = data.feed[0].id
    }
  }
}
"
`;

exports[`effect sdk Should generate the correct content with documentMode=string 1`] = `
"export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
import { Context, Data, Effect, Layer } from 'effect';
import { DocumentNode, ExecutionResult, print } from 'graphql';
import * as Http from '@effect/platform/HttpClient';
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Query = {
  __typename?: 'Query';
  /** A feed of repository submissions */
  feed?: Maybe<Array<Maybe<Entry>>>;
  /** A single entry */
  entry?: Maybe<Entry>;
  /** Return the currently logged in user, or null if nobody is logged in */
  currentUser?: Maybe<User>;
};


export type QueryFeedArgs = {
  type: FeedType;
  offset?: InputMaybe<Scalars['Int']>;
  limit?: InputMaybe<Scalars['Int']>;
};


export type QueryEntryArgs = {
  repoFullName: Scalars['String'];
};

/** A list of options for the sort order of the feed */
export enum FeedType {
  /** Sort by a combination of freshness and score, using Reddit's algorithm */
  Hot = 'HOT',
  /** Newest entries first */
  New = 'NEW',
  /** Highest score entries first */
  Top = 'TOP'
}

/** Information about a GitHub repository submitted to GitHunt */
export type Entry = {
  __typename?: 'Entry';
  /** Information about the repository from GitHub */
  repository: Repository;
  /** The GitHub user who submitted this entry */
  postedBy: User;
  /** A timestamp of when the entry was submitted */
  createdAt: Scalars['Float'];
  /** The score of this repository, upvotes - downvotes */
  score: Scalars['Int'];
  /** The hot score of this repository */
  hotScore: Scalars['Float'];
  /** Comments posted about this repository */
  comments: Array<Maybe<Comment>>;
  /** The number of comments posted about this repository */
  commentCount: Scalars['Int'];
  /** The SQL ID of this entry */
  id: Scalars['Int'];
  /** XXX to be changed */
  vote: Vote;
};


/** Information about a GitHub repository submitted to GitHunt */
export type EntryCommentsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
};

/**
 * A repository object from the GitHub API. This uses the exact field names returned by the
 * GitHub API for simplicity, even though the convention for GraphQL is usually to camel case.
 */
export type Repository = {
  __typename?: 'Repository';
  /** Just the name of the repository, e.g. GitHunt-API */
  name: Scalars['String'];
  /** The full name of the repository with the username, e.g. apollostack/GitHunt-API */
  full_name: Scalars['String'];
  /** The description of the repository */
  description?: Maybe<Scalars['String']>;
  /** The link to the repository on GitHub */
  html_url: Scalars['String'];
  /** The number of people who have starred this repository on GitHub */
  stargazers_count: Scalars['Int'];
  /** The number of open issues on this repository on GitHub */
  open_issues_count?: Maybe<Scalars['Int']>;
  /** The owner of this repository on GitHub, e.g. apollostack */
  owner?: Maybe<User>;
};

/** A user object from the GitHub API. This uses the exact field names returned from the GitHub API. */
export type User = {
  __typename?: 'User';
  /** The name of the user, e.g. apollostack */
  login: Scalars['String'];
  /** The URL to a directly embeddable image for this user's avatar */
  avatar_url: Scalars['String'];
  /** The URL of this user's GitHub page */
  html_url: Scalars['String'];
};

/** A comment about an entry, submitted by a user */
export type Comment = {
  __typename?: 'Comment';
  /** The SQL ID of this entry */
  id: Scalars['Int'];
  /** The GitHub user who posted the comment */
  postedBy: User;
  /** A timestamp of when the comment was posted */
  createdAt: Scalars['Float'];
  /** The text of the comment */
  content: Scalars['String'];
  /** The repository which this comment is about */
  repoName: Scalars['String'];
};

/** XXX to be removed */
export type Vote = {
  __typename?: 'Vote';
  vote_value: Scalars['Int'];
};

export type Mutation = {
  __typename?: 'Mutation';
  /** Submit a new repository, returns the new submission */
  submitRepository?: Maybe<Entry>;
  /** Vote on a repository submission, returns the submission that was voted on */
  vote?: Maybe<Entry>;
  /** Comment on a repository, returns the new comment */
  submitComment?: Maybe<Comment>;
};


export type MutationSubmitRepositoryArgs = {
  repoFullName: Scalars['String'];
};


export type MutationVoteArgs = {
  repoFullName: Scalars['String'];
  type: VoteType;
};


export type MutationSubmitCommentArgs = {
  repoFullName: Scalars['String'];
  commentContent: Scalars['String'];
};

/** The type of vote to record, when submitting a vote */
export enum VoteType {
  Up = 'UP',
  Down = 'DOWN',
  Cancel = 'CANCEL'
}

export type Subscription = {
  __typename?: 'Subscription';
  /** Subscription fires on every comment added */
  commentAdded?: Maybe<Comment>;
};


export type SubscriptionCommentAddedArgs = {
  repoFullName: Scalars['String'];
};
export type FeedQueryVariables = Exact<{ [key: string]: never; }>;


export type FeedQuery = { __typename?: 'Query', feed?: Array<{ __typename?: 'Entry', id: number, commentCount: number, repository: { __typename?: 'Repository', owner?: { __typename?: 'User', avatar_url: string } | null } } | null> | null };

export type Feed2QueryVariables = Exact<{
  v: Scalars['String'];
}>;


export type Feed2Query = { __typename?: 'Query', feed?: Array<{ __typename?: 'Entry', id: number } | null> | null };

export type Feed3QueryVariables = Exact<{
  v?: InputMaybe<Scalars['String']>;
}>;


export type Feed3Query = { __typename?: 'Query', feed?: Array<{ __typename?: 'Entry', id: number } | null> | null };

export type Feed4QueryVariables = Exact<{
  v?: Scalars['String'];
}>;


export type Feed4Query = { __typename?: 'Query', feed?: Array<{ __typename?: 'Entry', id: number } | null> | null };

export const FeedDocument = \`
    query feed {
  feed {
    id
    commentCount
    repository {
      owner {
        avatar_url
      }
    }
  }
}
    \`;
export const Feed2Document = \`
    query feed2($v: String!) {
  feed {
    id
  }
}
    \`;
export const Feed3Document = \`
    query feed3($v: String) {
  feed {
    id
  }
}
    \`;
export const Feed4Document = \`
    query feed4($v: String! = "TEST") {
  feed {
    id
  }
}
    \`;

export type GraphQLOperationOptions = {
  preferredOpName?: string;
};

type GraphQLOperationArgs = {
  document: string;
  fallbackOperationName: string;
};

export type GraphQLSuccessResponse<A = any> = Pick<
  Http.response.ClientResponse,
  'status' | 'headers'
> & {
  readonly body: ExecutionResult & { readonly data: A };
};

export type GraphQLErrorResponse = Pick<Http.response.ClientResponse, 'status' | 'headers'> & {
  readonly body: Pick<ExecutionResult, 'errors' | 'extensions'>;
};

export class MissingDataGraphQLResponseError extends Data.TaggedError(
  'MissingDataGraphQLResponseError',
)<GraphQLErrorResponse> {}

const headers = {
  // https://github.com/graphql/graphql-over-http/blob/main/spec/GraphQLOverHTTP.md#legacy-watershed
  Accept: 'application/graphql-response+json; charset=utf-8, application/json; charset=utf-8',
  'Content-Type': 'application/json',
};

export class GraphQLClient extends Context.Tag('GraphQLClient')<
  GraphQLClient,
  Http.client.Client<
    never,
    Http.error.HttpClientError | MissingDataGraphQLResponseError,
    GraphQLSuccessResponse
  >
>() {
  static fromDefaultClient(client: Http.client.Client.Default): Layer.Layer<GraphQLClient> {
    return Layer.succeed(
      GraphQLClient,
      client.pipe(
        Http.client.mapRequest(Http.request.setHeaders(headers)),
        Http.client.filterStatusOk,
        Http.client.mapEffectScoped(res =>
          Effect.flatMap(res.json, _ => {
            const body = _ as ExecutionResult;
            return body.data
              ? Effect.succeed({ ...res, body: { ...body, data: body.data } })
              : Effect.fail(new MissingDataGraphQLResponseError({ ...res, body }));
          }),
        ),
      ),
    );
  }

  static Live: Layer.Layer<GraphQLClient, never, Http.client.Client.Default> = Layer.unwrapEffect(
    Effect.map(Http.client.Client, GraphQLClient.fromDefaultClient),
  );

  static fromEndpoint(
    endpoint: string,
  ): Layer.Layer<GraphQLClient, never, Http.client.Client.Default> {
    return Layer.unwrapEffect(
      Effect.map(Http.client.Client, client =>
        GraphQLClient.fromDefaultClient(
          Http.client.mapRequest(client, Http.request.prependUrl(endpoint)),
        ),
      ),
    );
  }
}

const makeGraphQLOperation =
  <Vars, Data>({ document, fallbackOperationName }: GraphQLOperationArgs) =>
  (variables: Vars, opts?: GraphQLOperationOptions) => {
    const operationName = opts?.preferredOpName ?? fallbackOperationName;
    const query = document;

    return Effect.flatMap(GraphQLClient, client =>
      Http.request.post('').pipe(
        Http.request.jsonBody({
          query,
          operationName,
          variables,
        }),
        Effect.flatMap(client),
        Effect.map(_ => _ as GraphQLSuccessResponse<Data>),
      ),
    );
  };

export const feed = makeGraphQLOperation<FeedQueryVariables, FeedQuery>({
  document: FeedDocument,
  fallbackOperationName: 'feed',
});
export const feed2 = makeGraphQLOperation<Feed2QueryVariables, Feed2Query>({
  document: Feed2Document,
  fallbackOperationName: 'feed2',
});
export const feed3 = makeGraphQLOperation<Feed3QueryVariables, Feed3Query>({
  document: Feed3Document,
  fallbackOperationName: 'feed3',
});
export const feed4 = makeGraphQLOperation<Feed4QueryVariables, Feed4Query>({
  document: Feed4Document,
  fallbackOperationName: 'feed4',
});

import { NodeHttpClient } from '@effect/platform-node';
import { flow } from 'effect';

const run = flow(
  Effect.provide(
    GraphQLClient.fromEndpoint('http://localhost:4000/graphql').pipe(Layer.provide(NodeHttpClient.layer)),
  ),
  Effect.runPromise
);

async function test() {
  await run(feed({}));
  await run(feed3({}));
  await run(feed4({}));

  const { body: { data } } = await run(feed2({}));

  if (data.feed) {
    if (data.feed[0]) {
      const id = data.feed[0].id
    }
  }
}
"
`;

exports[`effect sdk Should support useTypeImports 1`] = `
"export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
import { Context, Data, Effect, Layer } from 'effect';
import { type DocumentNode, type ExecutionResult, print } from 'graphql';
import * as Http from '@effect/platform/HttpClient';
import gql from 'graphql-tag';
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Query = {
  __typename?: 'Query';
  /** A feed of repository submissions */
  feed?: Maybe<Array<Maybe<Entry>>>;
  /** A single entry */
  entry?: Maybe<Entry>;
  /** Return the currently logged in user, or null if nobody is logged in */
  currentUser?: Maybe<User>;
};


export type QueryFeedArgs = {
  type: FeedType;
  offset?: InputMaybe<Scalars['Int']>;
  limit?: InputMaybe<Scalars['Int']>;
};


export type QueryEntryArgs = {
  repoFullName: Scalars['String'];
};

/** A list of options for the sort order of the feed */
export enum FeedType {
  /** Sort by a combination of freshness and score, using Reddit's algorithm */
  Hot = 'HOT',
  /** Newest entries first */
  New = 'NEW',
  /** Highest score entries first */
  Top = 'TOP'
}

/** Information about a GitHub repository submitted to GitHunt */
export type Entry = {
  __typename?: 'Entry';
  /** Information about the repository from GitHub */
  repository: Repository;
  /** The GitHub user who submitted this entry */
  postedBy: User;
  /** A timestamp of when the entry was submitted */
  createdAt: Scalars['Float'];
  /** The score of this repository, upvotes - downvotes */
  score: Scalars['Int'];
  /** The hot score of this repository */
  hotScore: Scalars['Float'];
  /** Comments posted about this repository */
  comments: Array<Maybe<Comment>>;
  /** The number of comments posted about this repository */
  commentCount: Scalars['Int'];
  /** The SQL ID of this entry */
  id: Scalars['Int'];
  /** XXX to be changed */
  vote: Vote;
};


/** Information about a GitHub repository submitted to GitHunt */
export type EntryCommentsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
};

/**
 * A repository object from the GitHub API. This uses the exact field names returned by the
 * GitHub API for simplicity, even though the convention for GraphQL is usually to camel case.
 */
export type Repository = {
  __typename?: 'Repository';
  /** Just the name of the repository, e.g. GitHunt-API */
  name: Scalars['String'];
  /** The full name of the repository with the username, e.g. apollostack/GitHunt-API */
  full_name: Scalars['String'];
  /** The description of the repository */
  description?: Maybe<Scalars['String']>;
  /** The link to the repository on GitHub */
  html_url: Scalars['String'];
  /** The number of people who have starred this repository on GitHub */
  stargazers_count: Scalars['Int'];
  /** The number of open issues on this repository on GitHub */
  open_issues_count?: Maybe<Scalars['Int']>;
  /** The owner of this repository on GitHub, e.g. apollostack */
  owner?: Maybe<User>;
};

/** A user object from the GitHub API. This uses the exact field names returned from the GitHub API. */
export type User = {
  __typename?: 'User';
  /** The name of the user, e.g. apollostack */
  login: Scalars['String'];
  /** The URL to a directly embeddable image for this user's avatar */
  avatar_url: Scalars['String'];
  /** The URL of this user's GitHub page */
  html_url: Scalars['String'];
};

/** A comment about an entry, submitted by a user */
export type Comment = {
  __typename?: 'Comment';
  /** The SQL ID of this entry */
  id: Scalars['Int'];
  /** The GitHub user who posted the comment */
  postedBy: User;
  /** A timestamp of when the comment was posted */
  createdAt: Scalars['Float'];
  /** The text of the comment */
  content: Scalars['String'];
  /** The repository which this comment is about */
  repoName: Scalars['String'];
};

/** XXX to be removed */
export type Vote = {
  __typename?: 'Vote';
  vote_value: Scalars['Int'];
};

export type Mutation = {
  __typename?: 'Mutation';
  /** Submit a new repository, returns the new submission */
  submitRepository?: Maybe<Entry>;
  /** Vote on a repository submission, returns the submission that was voted on */
  vote?: Maybe<Entry>;
  /** Comment on a repository, returns the new comment */
  submitComment?: Maybe<Comment>;
};


export type MutationSubmitRepositoryArgs = {
  repoFullName: Scalars['String'];
};


export type MutationVoteArgs = {
  repoFullName: Scalars['String'];
  type: VoteType;
};


export type MutationSubmitCommentArgs = {
  repoFullName: Scalars['String'];
  commentContent: Scalars['String'];
};

/** The type of vote to record, when submitting a vote */
export enum VoteType {
  Up = 'UP',
  Down = 'DOWN',
  Cancel = 'CANCEL'
}

export type Subscription = {
  __typename?: 'Subscription';
  /** Subscription fires on every comment added */
  commentAdded?: Maybe<Comment>;
};


export type SubscriptionCommentAddedArgs = {
  repoFullName: Scalars['String'];
};
export type FeedQueryVariables = Exact<{ [key: string]: never; }>;


export type FeedQuery = { __typename?: 'Query', feed?: Array<{ __typename?: 'Entry', id: number, commentCount: number, repository: { __typename?: 'Repository', owner?: { __typename?: 'User', avatar_url: string } | null } } | null> | null };

export type Feed2QueryVariables = Exact<{
  v: Scalars['String'];
}>;


export type Feed2Query = { __typename?: 'Query', feed?: Array<{ __typename?: 'Entry', id: number } | null> | null };

export type Feed3QueryVariables = Exact<{
  v?: InputMaybe<Scalars['String']>;
}>;


export type Feed3Query = { __typename?: 'Query', feed?: Array<{ __typename?: 'Entry', id: number } | null> | null };

export type Feed4QueryVariables = Exact<{
  v?: Scalars['String'];
}>;


export type Feed4Query = { __typename?: 'Query', feed?: Array<{ __typename?: 'Entry', id: number } | null> | null };

export const FeedDocument = gql\`
    query feed {
  feed {
    id
    commentCount
    repository {
      owner {
        avatar_url
      }
    }
  }
}
    \`;
export const Feed2Document = gql\`
    query feed2($v: String!) {
  feed {
    id
  }
}
    \`;
export const Feed3Document = gql\`
    query feed3($v: String) {
  feed {
    id
  }
}
    \`;
export const Feed4Document = gql\`
    query feed4($v: String! = "TEST") {
  feed {
    id
  }
}
    \`;

export type GraphQLOperationOptions = {
  preferredOpName?: string;
};

type GraphQLOperationArgs = {
  document: DocumentNode;
  fallbackOperationName: string;
};

export type GraphQLSuccessResponse<A = any> = Pick<
  Http.response.ClientResponse,
  'status' | 'headers'
> & {
  readonly body: ExecutionResult & { readonly data: A };
};

export type GraphQLErrorResponse = Pick<Http.response.ClientResponse, 'status' | 'headers'> & {
  readonly body: Pick<ExecutionResult, 'errors' | 'extensions'>;
};

export class MissingDataGraphQLResponseError extends Data.TaggedError(
  'MissingDataGraphQLResponseError',
)<GraphQLErrorResponse> {}

const headers = {
  // https://github.com/graphql/graphql-over-http/blob/main/spec/GraphQLOverHTTP.md#legacy-watershed
  Accept: 'application/graphql-response+json; charset=utf-8, application/json; charset=utf-8',
  'Content-Type': 'application/json',
};

export class GraphQLClient extends Context.Tag('GraphQLClient')<
  GraphQLClient,
  Http.client.Client<
    never,
    Http.error.HttpClientError | MissingDataGraphQLResponseError,
    GraphQLSuccessResponse
  >
>() {
  static fromDefaultClient(client: Http.client.Client.Default): Layer.Layer<GraphQLClient> {
    return Layer.succeed(
      GraphQLClient,
      client.pipe(
        Http.client.mapRequest(Http.request.setHeaders(headers)),
        Http.client.filterStatusOk,
        Http.client.mapEffectScoped(res =>
          Effect.flatMap(res.json, _ => {
            const body = _ as ExecutionResult;
            return body.data
              ? Effect.succeed({ ...res, body: { ...body, data: body.data } })
              : Effect.fail(new MissingDataGraphQLResponseError({ ...res, body }));
          }),
        ),
      ),
    );
  }

  static Live: Layer.Layer<GraphQLClient, never, Http.client.Client.Default> = Layer.unwrapEffect(
    Effect.map(Http.client.Client, GraphQLClient.fromDefaultClient),
  );

  static fromEndpoint(
    endpoint: string,
  ): Layer.Layer<GraphQLClient, never, Http.client.Client.Default> {
    return Layer.unwrapEffect(
      Effect.map(Http.client.Client, client =>
        GraphQLClient.fromDefaultClient(
          Http.client.mapRequest(client, Http.request.prependUrl(endpoint)),
        ),
      ),
    );
  }
}

const makeGraphQLOperation =
  <Vars, Data>({ document, fallbackOperationName }: GraphQLOperationArgs) =>
  (variables: Vars, opts?: GraphQLOperationOptions) => {
    const operationName = opts?.preferredOpName ?? fallbackOperationName;
    const query = print(document);

    return Effect.flatMap(GraphQLClient, client =>
      Http.request.post('').pipe(
        Http.request.jsonBody({
          query,
          operationName,
          variables,
        }),
        Effect.flatMap(client),
        Effect.map(_ => _ as GraphQLSuccessResponse<Data>),
      ),
    );
  };

export const feed = makeGraphQLOperation<FeedQueryVariables, FeedQuery>({
  document: FeedDocument,
  fallbackOperationName: 'feed',
});
export const feed2 = makeGraphQLOperation<Feed2QueryVariables, Feed2Query>({
  document: Feed2Document,
  fallbackOperationName: 'feed2',
});
export const feed3 = makeGraphQLOperation<Feed3QueryVariables, Feed3Query>({
  document: Feed3Document,
  fallbackOperationName: 'feed3',
});
export const feed4 = makeGraphQLOperation<Feed4QueryVariables, Feed4Query>({
  document: Feed4Document,
  fallbackOperationName: 'feed4',
});

import { NodeHttpClient } from '@effect/platform-node';
import { flow } from 'effect';

const run = flow(
  Effect.provide(
    GraphQLClient.fromEndpoint('http://localhost:4000/graphql').pipe(Layer.provide(NodeHttpClient.layer)),
  ),
  Effect.runPromise
);

async function test() {
  await run(feed({}));
  await run(feed3({}));
  await run(feed4({}));

  const { body: { data } } = await run(feed2({}));

  if (data.feed) {
    if (data.feed[0]) {
      const id = data.feed[0].id
    }
  }
}
"
`;
