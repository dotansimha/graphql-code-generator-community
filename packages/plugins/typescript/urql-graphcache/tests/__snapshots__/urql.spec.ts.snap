// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`urql graphcache Should correctly name GraphCacheResolvers & GraphCacheOptimisticUpdaters with nonstandard mutationType names 1`] = `
"import { offlineExchange } from '@urql/exchange-graphcache';
import { Resolver as GraphCacheResolver, UpdateResolver as GraphCacheUpdateResolver, OptimisticMutationResolver as GraphCacheOptimisticMutationResolver } from '@urql/exchange-graphcache';

export type WithTypename<T extends { __typename?: any }> = Partial<T> & { __typename: NonNullable<T['__typename']> };

export type GraphCacheKeysConfig = {
  Todo?: (data: WithTypename<Todo>) => null | string
}

export type GraphCacheResolvers = {
  Query_Root?: {
    todos?: GraphCacheResolver<WithTypename<Query_Root>, Record<string, never>, Array<WithTypename<Todo> | string>>
  },
  Todo?: {
    id?: GraphCacheResolver<WithTypename<Todo>, Record<string, never>, Scalars['ID'] | string>,
    text?: GraphCacheResolver<WithTypename<Todo>, Record<string, never>, Scalars['String'] | string>,
    complete?: GraphCacheResolver<WithTypename<Todo>, Record<string, never>, Scalars['Boolean'] | string>
  }
};

export type GraphCacheOptimisticUpdaters = {
  toggleTodo?: GraphCacheOptimisticMutationResolver<Mutation_RootToggleTodoArgs, WithTypename<Todo>>
};

export type GraphCacheUpdaters = {
  Query_Root?: {
    todos?: GraphCacheUpdateResolver<{ todos: Maybe<Array<WithTypename<Todo>>> }, Record<string, never>>
  },
  Mutation_Root?: {
    toggleTodo?: GraphCacheUpdateResolver<{ toggleTodo: WithTypename<Todo> }, Mutation_RootToggleTodoArgs>
  },
  Subscription?: {},
  Todo?: {
    id?: GraphCacheUpdateResolver<Maybe<WithTypename<Todo>>, Record<string, never>>,
    text?: GraphCacheUpdateResolver<Maybe<WithTypename<Todo>>, Record<string, never>>,
    complete?: GraphCacheUpdateResolver<Maybe<WithTypename<Todo>>, Record<string, never>>
  },
};

export type GraphCacheConfig = Parameters<typeof offlineExchange>[0] & {
  updates?: GraphCacheUpdaters,
  keys?: GraphCacheKeysConfig,
  optimistic?: GraphCacheOptimisticUpdaters,
  resolvers?: GraphCacheResolvers,
};"
`;

exports[`urql graphcache Should correctly output GraphCacheOptimisticUpdaters when there are no mutations 1`] = `
"import { offlineExchange } from '@urql/exchange-graphcache';
import { Resolver as GraphCacheResolver, UpdateResolver as GraphCacheUpdateResolver, OptimisticMutationResolver as GraphCacheOptimisticMutationResolver } from '@urql/exchange-graphcache';

export type WithTypename<T extends { __typename?: any }> = Partial<T> & { __typename: NonNullable<T['__typename']> };

export type GraphCacheKeysConfig = {
  Todo?: (data: WithTypename<Todo>) => null | string
}

export type GraphCacheResolvers = {
  Query_Root?: {
    todos?: GraphCacheResolver<WithTypename<Query_Root>, Record<string, never>, Array<WithTypename<Todo> | string>>
  },
  Todo?: {
    id?: GraphCacheResolver<WithTypename<Todo>, Record<string, never>, Scalars['ID'] | string>,
    text?: GraphCacheResolver<WithTypename<Todo>, Record<string, never>, Scalars['String'] | string>,
    complete?: GraphCacheResolver<WithTypename<Todo>, Record<string, never>, Scalars['Boolean'] | string>
  }
};

export type GraphCacheOptimisticUpdaters = {};

export type GraphCacheUpdaters = {
  Query_Root?: {
    todos?: GraphCacheUpdateResolver<{ todos: Maybe<Array<WithTypename<Todo>>> }, Record<string, never>>
  },
  Mutation?: {},
  Subscription?: {},
  Todo?: {
    id?: GraphCacheUpdateResolver<Maybe<WithTypename<Todo>>, Record<string, never>>,
    text?: GraphCacheUpdateResolver<Maybe<WithTypename<Todo>>, Record<string, never>>,
    complete?: GraphCacheUpdateResolver<Maybe<WithTypename<Todo>>, Record<string, never>>
  },
};

export type GraphCacheConfig = Parameters<typeof offlineExchange>[0] & {
  updates?: GraphCacheUpdaters,
  keys?: GraphCacheKeysConfig,
  optimistic?: GraphCacheOptimisticUpdaters,
  resolvers?: GraphCacheResolvers,
};"
`;

exports[`urql graphcache Should output the cache-generic correctly (with interfaces) 1`] = `
"import { offlineExchange } from '@urql/exchange-graphcache';
import { Resolver as GraphCacheResolver, UpdateResolver as GraphCacheUpdateResolver, OptimisticMutationResolver as GraphCacheOptimisticMutationResolver } from '@urql/exchange-graphcache';

export type WithTypename<T extends { __typename?: any }> = Partial<T> & { __typename: NonNullable<T['__typename']> };

export type GraphCacheKeysConfig = {
  Author?: (data: WithTypename<Author>) => null | string,
  Todo?: (data: WithTypename<Todo>) => null | string,
  Textbook?: (data: WithTypename<Textbook>) => null | string
}

export type GraphCacheResolvers = {
  Query?: {
    schoolBooks?: GraphCacheResolver<WithTypename<Query>, Record<string, never>, Array<WithTypename<Textbook> | string>>
  },
  Author?: {
    id?: GraphCacheResolver<WithTypename<Author>, Record<string, never>, Scalars['ID'] | string>,
    name?: GraphCacheResolver<WithTypename<Author>, Record<string, never>, Scalars['String'] | string>,
    friends?: GraphCacheResolver<WithTypename<Author>, Record<string, never>, Array<WithTypename<Author> | string>>,
    friendsPaginated?: GraphCacheResolver<WithTypename<Author>, AuthorFriendsPaginatedArgs, Array<WithTypename<Author> | string>>
  },
  Todo?: {
    id?: GraphCacheResolver<WithTypename<Todo>, Record<string, never>, Scalars['ID'] | string>,
    text?: GraphCacheResolver<WithTypename<Todo>, Record<string, never>, Scalars['String'] | string>,
    complete?: GraphCacheResolver<WithTypename<Todo>, Record<string, never>, Scalars['Boolean'] | string>,
    author?: GraphCacheResolver<WithTypename<Todo>, Record<string, never>, WithTypename<Author> | string>
  },
  Textbook?: {
    id?: GraphCacheResolver<WithTypename<Textbook>, Record<string, never>, Scalars['ID'] | string>,
    title?: GraphCacheResolver<WithTypename<Textbook>, Record<string, never>, Scalars['String'] | string>,
    author?: GraphCacheResolver<WithTypename<Textbook>, Record<string, never>, WithTypename<Author> | string>,
    todo?: GraphCacheResolver<WithTypename<Textbook>, Record<string, never>, WithTypename<Todo> | string>
  }
};

export type GraphCacheOptimisticUpdaters = {};

export type GraphCacheUpdaters = {
  Query?: {
    schoolBooks?: GraphCacheUpdateResolver<{ schoolBooks: Maybe<Array<WithTypename<Textbook>>> }, Record<string, never>>
  },
  Mutation?: {},
  Subscription?: {},
  Author?: {
    id?: GraphCacheUpdateResolver<Maybe<WithTypename<Author>>, Record<string, never>>,
    name?: GraphCacheUpdateResolver<Maybe<WithTypename<Author>>, Record<string, never>>,
    friends?: GraphCacheUpdateResolver<Maybe<WithTypename<Author>>, Record<string, never>>,
    friendsPaginated?: GraphCacheUpdateResolver<Maybe<WithTypename<Author>>, AuthorFriendsPaginatedArgs>
  },
  Todo?: {
    id?: GraphCacheUpdateResolver<Maybe<WithTypename<Todo>>, Record<string, never>>,
    text?: GraphCacheUpdateResolver<Maybe<WithTypename<Todo>>, Record<string, never>>,
    complete?: GraphCacheUpdateResolver<Maybe<WithTypename<Todo>>, Record<string, never>>,
    author?: GraphCacheUpdateResolver<Maybe<WithTypename<Todo>>, Record<string, never>>
  },
  Textbook?: {
    id?: GraphCacheUpdateResolver<Maybe<WithTypename<Textbook>>, Record<string, never>>,
    title?: GraphCacheUpdateResolver<Maybe<WithTypename<Textbook>>, Record<string, never>>,
    author?: GraphCacheUpdateResolver<Maybe<WithTypename<Textbook>>, Record<string, never>>,
    todo?: GraphCacheUpdateResolver<Maybe<WithTypename<Textbook>>, Record<string, never>>
  },
};

export type GraphCacheConfig = Parameters<typeof offlineExchange>[0] & {
  updates?: GraphCacheUpdaters,
  keys?: GraphCacheKeysConfig,
  optimistic?: GraphCacheOptimisticUpdaters,
  resolvers?: GraphCacheResolvers,
};"
`;

exports[`urql graphcache Should output the cache-generic correctly (with typesPrefix and typesSuffix) 1`] = `
"import { offlineExchange } from '@urql/exchange-graphcache';
import { Resolver as GraphCacheResolver, UpdateResolver as GraphCacheUpdateResolver, OptimisticMutationResolver as GraphCacheOptimisticMutationResolver } from '@urql/exchange-graphcache';

export type WithTypename<T extends { __typename?: any }> = Partial<T> & { __typename: NonNullable<T['__typename']> };

export type GraphCacheKeysConfig = {
  Author?: (data: WithTypename<PrefixAuthorSuffix>) => null | string,
  Todo?: (data: WithTypename<PrefixTodoSuffix>) => null | string
}

export type GraphCacheResolvers = {
  Query?: {
    todos?: GraphCacheResolver<WithTypename<PrefixQuerySuffix>, Record<string, never>, Array<WithTypename<PrefixTodoSuffix> | string>>
  },
  Author?: {
    id?: GraphCacheResolver<WithTypename<PrefixAuthorSuffix>, Record<string, never>, Scalars['ID'] | string>,
    name?: GraphCacheResolver<WithTypename<PrefixAuthorSuffix>, Record<string, never>, Scalars['String'] | string>,
    friends?: GraphCacheResolver<WithTypename<PrefixAuthorSuffix>, Record<string, never>, Array<WithTypename<PrefixAuthorSuffix> | string>>,
    friendsPaginated?: GraphCacheResolver<WithTypename<PrefixAuthorSuffix>, PrefixAuthorFriendsPaginatedArgsSuffix, Array<WithTypename<PrefixAuthorSuffix> | string>>
  },
  Todo?: {
    id?: GraphCacheResolver<WithTypename<PrefixTodoSuffix>, Record<string, never>, Scalars['ID'] | string>,
    text?: GraphCacheResolver<WithTypename<PrefixTodoSuffix>, Record<string, never>, Scalars['String'] | string>,
    complete?: GraphCacheResolver<WithTypename<PrefixTodoSuffix>, Record<string, never>, Scalars['Boolean'] | string>,
    author?: GraphCacheResolver<WithTypename<PrefixTodoSuffix>, Record<string, never>, WithTypename<PrefixAuthorSuffix> | string>
  }
};

export type GraphCacheOptimisticUpdaters = {
  toggleTodo?: GraphCacheOptimisticMutationResolver<PrefixMutationToggleTodoArgsSuffix, WithTypename<PrefixTodoSuffix>>,
  toggleTodos?: GraphCacheOptimisticMutationResolver<PrefixMutationToggleTodosArgsSuffix, Array<WithTypename<PrefixTodoSuffix>>>,
  toggleTodosOptionalArray?: GraphCacheOptimisticMutationResolver<PrefixMutationToggleTodosOptionalArrayArgsSuffix, Maybe<Array<WithTypename<PrefixTodoSuffix>>>>,
  toggleTodosOptionalEntity?: GraphCacheOptimisticMutationResolver<PrefixMutationToggleTodosOptionalEntityArgsSuffix, Array<WithTypename<PrefixTodoSuffix>>>,
  toggleTodosOptional?: GraphCacheOptimisticMutationResolver<PrefixMutationToggleTodosOptionalArgsSuffix, Maybe<Array<WithTypename<PrefixTodoSuffix>>>>
};

export type GraphCacheUpdaters = {
  Query?: {
    todos?: GraphCacheUpdateResolver<{ todos: Maybe<Array<WithTypename<PrefixTodoSuffix>>> }, Record<string, never>>
  },
  Mutation?: {
    toggleTodo?: GraphCacheUpdateResolver<{ toggleTodo: WithTypename<PrefixTodoSuffix> }, PrefixMutationToggleTodoArgsSuffix>,
    toggleTodos?: GraphCacheUpdateResolver<{ toggleTodos: Array<WithTypename<PrefixTodoSuffix>> }, PrefixMutationToggleTodosArgsSuffix>,
    toggleTodosOptionalArray?: GraphCacheUpdateResolver<{ toggleTodosOptionalArray: Maybe<Array<WithTypename<PrefixTodoSuffix>>> }, PrefixMutationToggleTodosOptionalArrayArgsSuffix>,
    toggleTodosOptionalEntity?: GraphCacheUpdateResolver<{ toggleTodosOptionalEntity: Array<WithTypename<PrefixTodoSuffix>> }, PrefixMutationToggleTodosOptionalEntityArgsSuffix>,
    toggleTodosOptional?: GraphCacheUpdateResolver<{ toggleTodosOptional: Maybe<Array<WithTypename<PrefixTodoSuffix>>> }, PrefixMutationToggleTodosOptionalArgsSuffix>
  },
  Subscription?: {},
  Author?: {
    id?: GraphCacheUpdateResolver<Maybe<WithTypename<PrefixAuthorSuffix>>, Record<string, never>>,
    name?: GraphCacheUpdateResolver<Maybe<WithTypename<PrefixAuthorSuffix>>, Record<string, never>>,
    friends?: GraphCacheUpdateResolver<Maybe<WithTypename<PrefixAuthorSuffix>>, Record<string, never>>,
    friendsPaginated?: GraphCacheUpdateResolver<Maybe<WithTypename<PrefixAuthorSuffix>>, PrefixAuthorFriendsPaginatedArgsSuffix>
  },
  Todo?: {
    id?: GraphCacheUpdateResolver<Maybe<WithTypename<PrefixTodoSuffix>>, Record<string, never>>,
    text?: GraphCacheUpdateResolver<Maybe<WithTypename<PrefixTodoSuffix>>, Record<string, never>>,
    complete?: GraphCacheUpdateResolver<Maybe<WithTypename<PrefixTodoSuffix>>, Record<string, never>>,
    author?: GraphCacheUpdateResolver<Maybe<WithTypename<PrefixTodoSuffix>>, Record<string, never>>
  },
};

export type GraphCacheConfig = Parameters<typeof offlineExchange>[0] & {
  updates?: GraphCacheUpdaters,
  keys?: GraphCacheKeysConfig,
  optimistic?: GraphCacheOptimisticUpdaters,
  resolvers?: GraphCacheResolvers,
};"
`;

exports[`urql graphcache Should output the cache-generic correctly (with unions) 1`] = `
"import { offlineExchange } from '@urql/exchange-graphcache';
import { Resolver as GraphCacheResolver, UpdateResolver as GraphCacheUpdateResolver, OptimisticMutationResolver as GraphCacheOptimisticMutationResolver } from '@urql/exchange-graphcache';

export type WithTypename<T extends { __typename?: any }> = Partial<T> & { __typename: NonNullable<T['__typename']> };

export type GraphCacheKeysConfig = {
  Book?: (data: WithTypename<Book>) => null | string,
  Movie?: (data: WithTypename<Movie>) => null | string
}

export type GraphCacheResolvers = {
  Query?: {
    media?: GraphCacheResolver<WithTypename<Query>, Record<string, never>, Array<WithTypename<Media> | string>>
  },
  Book?: {
    id?: GraphCacheResolver<WithTypename<Book>, Record<string, never>, Scalars['ID'] | string>,
    title?: GraphCacheResolver<WithTypename<Book>, Record<string, never>, Scalars['String'] | string>,
    pages?: GraphCacheResolver<WithTypename<Book>, Record<string, never>, Scalars['Int'] | string>
  },
  Movie?: {
    id?: GraphCacheResolver<WithTypename<Movie>, Record<string, never>, Scalars['ID'] | string>,
    title?: GraphCacheResolver<WithTypename<Movie>, Record<string, never>, Scalars['String'] | string>,
    duration?: GraphCacheResolver<WithTypename<Movie>, Record<string, never>, Scalars['Int'] | string>
  }
};

export type GraphCacheOptimisticUpdaters = {
  updateMedia?: GraphCacheOptimisticMutationResolver<MutationUpdateMediaArgs, Maybe<WithTypename<Media>>>
};

export type GraphCacheUpdaters = {
  Query?: {
    media?: GraphCacheUpdateResolver<{ media: Maybe<Array<WithTypename<Media>>> }, Record<string, never>>
  },
  Mutation?: {
    updateMedia?: GraphCacheUpdateResolver<{ updateMedia: Maybe<WithTypename<Media>> }, MutationUpdateMediaArgs>
  },
  Subscription?: {},
  Book?: {
    id?: GraphCacheUpdateResolver<Maybe<WithTypename<Book>>, Record<string, never>>,
    title?: GraphCacheUpdateResolver<Maybe<WithTypename<Book>>, Record<string, never>>,
    pages?: GraphCacheUpdateResolver<Maybe<WithTypename<Book>>, Record<string, never>>
  },
  Movie?: {
    id?: GraphCacheUpdateResolver<Maybe<WithTypename<Movie>>, Record<string, never>>,
    title?: GraphCacheUpdateResolver<Maybe<WithTypename<Movie>>, Record<string, never>>,
    duration?: GraphCacheUpdateResolver<Maybe<WithTypename<Movie>>, Record<string, never>>
  },
};

export type GraphCacheConfig = Parameters<typeof offlineExchange>[0] & {
  updates?: GraphCacheUpdaters,
  keys?: GraphCacheKeysConfig,
  optimistic?: GraphCacheOptimisticUpdaters,
  resolvers?: GraphCacheResolvers,
};"
`;

exports[`urql graphcache Should output the cache-generic correctly 1`] = `
"import { offlineExchange } from '@urql/exchange-graphcache';
import { Resolver as GraphCacheResolver, UpdateResolver as GraphCacheUpdateResolver, OptimisticMutationResolver as GraphCacheOptimisticMutationResolver } from '@urql/exchange-graphcache';

export type WithTypename<T extends { __typename?: any }> = Partial<T> & { __typename: NonNullable<T['__typename']> };

export type GraphCacheKeysConfig = {
  Author?: (data: WithTypename<Author>) => null | string,
  Todo?: (data: WithTypename<Todo>) => null | string
}

export type GraphCacheResolvers = {
  Query?: {
    todos?: GraphCacheResolver<WithTypename<Query>, Record<string, never>, Array<WithTypename<Todo> | string>>
  },
  Author?: {
    id?: GraphCacheResolver<WithTypename<Author>, Record<string, never>, Scalars['ID'] | string>,
    name?: GraphCacheResolver<WithTypename<Author>, Record<string, never>, Scalars['String'] | string>,
    friends?: GraphCacheResolver<WithTypename<Author>, Record<string, never>, Array<WithTypename<Author> | string>>,
    friendsPaginated?: GraphCacheResolver<WithTypename<Author>, AuthorFriendsPaginatedArgs, Array<WithTypename<Author> | string>>
  },
  Todo?: {
    id?: GraphCacheResolver<WithTypename<Todo>, Record<string, never>, Scalars['ID'] | string>,
    text?: GraphCacheResolver<WithTypename<Todo>, Record<string, never>, Scalars['String'] | string>,
    complete?: GraphCacheResolver<WithTypename<Todo>, Record<string, never>, Scalars['Boolean'] | string>,
    author?: GraphCacheResolver<WithTypename<Todo>, Record<string, never>, WithTypename<Author> | string>
  }
};

export type GraphCacheOptimisticUpdaters = {
  toggleTodo?: GraphCacheOptimisticMutationResolver<MutationToggleTodoArgs, WithTypename<Todo>>,
  toggleTodos?: GraphCacheOptimisticMutationResolver<MutationToggleTodosArgs, Array<WithTypename<Todo>>>,
  toggleTodosOptionalArray?: GraphCacheOptimisticMutationResolver<MutationToggleTodosOptionalArrayArgs, Maybe<Array<WithTypename<Todo>>>>,
  toggleTodosOptionalEntity?: GraphCacheOptimisticMutationResolver<MutationToggleTodosOptionalEntityArgs, Array<WithTypename<Todo>>>,
  toggleTodosOptional?: GraphCacheOptimisticMutationResolver<MutationToggleTodosOptionalArgs, Maybe<Array<WithTypename<Todo>>>>
};

export type GraphCacheUpdaters = {
  Query?: {
    todos?: GraphCacheUpdateResolver<{ todos: Maybe<Array<WithTypename<Todo>>> }, Record<string, never>>
  },
  Mutation?: {
    toggleTodo?: GraphCacheUpdateResolver<{ toggleTodo: WithTypename<Todo> }, MutationToggleTodoArgs>,
    toggleTodos?: GraphCacheUpdateResolver<{ toggleTodos: Array<WithTypename<Todo>> }, MutationToggleTodosArgs>,
    toggleTodosOptionalArray?: GraphCacheUpdateResolver<{ toggleTodosOptionalArray: Maybe<Array<WithTypename<Todo>>> }, MutationToggleTodosOptionalArrayArgs>,
    toggleTodosOptionalEntity?: GraphCacheUpdateResolver<{ toggleTodosOptionalEntity: Array<WithTypename<Todo>> }, MutationToggleTodosOptionalEntityArgs>,
    toggleTodosOptional?: GraphCacheUpdateResolver<{ toggleTodosOptional: Maybe<Array<WithTypename<Todo>>> }, MutationToggleTodosOptionalArgs>
  },
  Subscription?: {},
  Author?: {
    id?: GraphCacheUpdateResolver<Maybe<WithTypename<Author>>, Record<string, never>>,
    name?: GraphCacheUpdateResolver<Maybe<WithTypename<Author>>, Record<string, never>>,
    friends?: GraphCacheUpdateResolver<Maybe<WithTypename<Author>>, Record<string, never>>,
    friendsPaginated?: GraphCacheUpdateResolver<Maybe<WithTypename<Author>>, AuthorFriendsPaginatedArgs>
  },
  Todo?: {
    id?: GraphCacheUpdateResolver<Maybe<WithTypename<Todo>>, Record<string, never>>,
    text?: GraphCacheUpdateResolver<Maybe<WithTypename<Todo>>, Record<string, never>>,
    complete?: GraphCacheUpdateResolver<Maybe<WithTypename<Todo>>, Record<string, never>>,
    author?: GraphCacheUpdateResolver<Maybe<WithTypename<Todo>>, Record<string, never>>
  },
};

export type GraphCacheConfig = Parameters<typeof offlineExchange>[0] & {
  updates?: GraphCacheUpdaters,
  keys?: GraphCacheKeysConfig,
  optimistic?: GraphCacheOptimisticUpdaters,
  resolvers?: GraphCacheResolvers,
};"
`;
