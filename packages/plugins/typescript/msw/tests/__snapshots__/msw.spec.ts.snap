// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`msw Should generate JSDoc documentation with variables and selection from the operations themselves: content with variables and selection JSDoc documentation 1`] = `
"
/**
 * @param resolver a function that accepts a captured request and may return a mocked response.
 * @see https://mswjs.io/docs/basics/response-resolver
 * @example
 * mockUserQuery((req, res, ctx) => {
 *   const { id, offset, limit } = req.variables;
 *   return res(
 *     ctx.data({ name, phone, country })
 *   )
 * })
 */
export const mockUserQuery = (resolver: Parameters<typeof graphql.query<UserQuery, UserQueryVariables>>[1]) =>
  graphql.query<UserQuery, UserQueryVariables>(
    'User',
    resolver
  )

/**
 * @param resolver a function that accepts a captured request and may return a mocked response.
 * @see https://mswjs.io/docs/basics/response-resolver
 * @example
 * mockUpdateUserMutation((req, res, ctx) => {
 *   const { id, offset, limit } = req.variables;
 *   return res(
 *     ctx.data({ name, phone, country })
 *   )
 * })
 */
export const mockUpdateUserMutation = (resolver: Parameters<typeof graphql.mutation<UpdateUserMutation, UpdateUserMutationVariables>>[1]) =>
  graphql.mutation<UpdateUserMutation, UpdateUserMutationVariables>(
    'UpdateUser',
    resolver
  )
"
`;

exports[`msw Should generate a link with an endpoint when passed a link variable: content with a link/endpoint 1`] = `
"const api = graphql.link('http://localhost:3000/graphql')

/**
 * @param resolver a function that accepts a captured request and may return a mocked response.
 * @see https://mswjs.io/docs/basics/response-resolver
 * @example
 * mockUserQueryApi((req, res, ctx) => {
 *   return res(
 *     ctx.data({ name })
 *   )
 * })
 */
export const mockUserQueryApi = (resolver: Parameters<typeof api.query<UserQuery, UserQueryVariables>>[1]) =>
  api.query<UserQuery, UserQueryVariables>(
    'User',
    resolver
  )

/**
 * @param resolver a function that accepts a captured request and may return a mocked response.
 * @see https://mswjs.io/docs/basics/response-resolver
 * @example
 * mockUpdateUserMutationApi((req, res, ctx) => {
 *   return res(
 *     ctx.data({ name })
 *   )
 * })
 */
export const mockUpdateUserMutationApi = (resolver: Parameters<typeof api.mutation<UpdateUserMutation, UpdateUserMutationVariables>>[1]) =>
  api.mutation<UpdateUserMutation, UpdateUserMutationVariables>(
    'UpdateUser',
    resolver
  )
"
`;

exports[`msw Should generate handlerNames without suffix when withSuffix is false: content without link name suffix 1`] = `
"const api = graphql.link('http://localhost:3000/graphql')

/**
 * @param resolver a function that accepts a captured request and may return a mocked response.
 * @see https://mswjs.io/docs/basics/response-resolver
 * @example
 * mockUserQuery((req, res, ctx) => {
 *   return res(
 *     ctx.data({ name })
 *   )
 * })
 */
export const mockUserQuery = (resolver: Parameters<typeof api.query<UserQuery, UserQueryVariables>>[1]) =>
  api.query<UserQuery, UserQueryVariables>(
    'User',
    resolver
  )

/**
 * @param resolver a function that accepts a captured request and may return a mocked response.
 * @see https://mswjs.io/docs/basics/response-resolver
 * @example
 * mockUpdateUserMutation((req, res, ctx) => {
 *   return res(
 *     ctx.data({ name })
 *   )
 * })
 */
export const mockUpdateUserMutation = (resolver: Parameters<typeof api.mutation<UpdateUserMutation, UpdateUserMutationVariables>>[1]) =>
  api.mutation<UpdateUserMutation, UpdateUserMutationVariables>(
    'UpdateUser',
    resolver
  )
"
`;

exports[`msw Should generate mocks based on queries and mutations: content 1`] = `
"
/**
 * @param resolver a function that accepts a captured request and may return a mocked response.
 * @see https://mswjs.io/docs/basics/response-resolver
 * @example
 * mockUserQuery((req, res, ctx) => {
 *   return res(
 *     ctx.data({ name })
 *   )
 * })
 */
export const mockUserQuery = (resolver: Parameters<typeof graphql.query<UserQuery, UserQueryVariables>>[1]) =>
  graphql.query<UserQuery, UserQueryVariables>(
    'User',
    resolver
  )

/**
 * @param resolver a function that accepts a captured request and may return a mocked response.
 * @see https://mswjs.io/docs/basics/response-resolver
 * @example
 * mockUpdateUserMutation((req, res, ctx) => {
 *   return res(
 *     ctx.data({ name })
 *   )
 * })
 */
export const mockUpdateUserMutation = (resolver: Parameters<typeof graphql.mutation<UpdateUserMutation, UpdateUserMutationVariables>>[1]) =>
  graphql.mutation<UpdateUserMutation, UpdateUserMutationVariables>(
    'UpdateUser',
    resolver
  )
"
`;

exports[`msw Should generate mocks based on queries and mutations: imports 1`] = `
[
  "import { graphql } from 'msw'",
]
`;

exports[`msw Should use the "importOperationTypesFrom" setting: content with types configured via importOperationTypesFrom 1`] = `
"
/**
 * @param resolver a function that accepts a captured request and may return a mocked response.
 * @see https://mswjs.io/docs/basics/response-resolver
 * @example
 * mockUserQuery((req, res, ctx) => {
 *   return res(
 *     ctx.data({ name })
 *   )
 * })
 */
export const mockUserQuery = (resolver: Parameters<typeof graphql.query<Types.UserQuery, Types.UserQueryVariables>>[1]) =>
  graphql.query<Types.UserQuery, Types.UserQueryVariables>(
    'User',
    resolver
  )

/**
 * @param resolver a function that accepts a captured request and may return a mocked response.
 * @see https://mswjs.io/docs/basics/response-resolver
 * @example
 * mockUpdateUserMutation((req, res, ctx) => {
 *   return res(
 *     ctx.data({ name })
 *   )
 * })
 */
export const mockUpdateUserMutation = (resolver: Parameters<typeof graphql.mutation<Types.UpdateUserMutation, Types.UpdateUserMutationVariables>>[1]) =>
  graphql.mutation<Types.UpdateUserMutation, Types.UpdateUserMutationVariables>(
    'UpdateUser',
    resolver
  )
"
`;
