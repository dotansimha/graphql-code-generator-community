// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`React-Query exposeQueryKeys: true Should generate getKey for each query 1`] = `
"

export const TestDocument = \`
    query test {
  feed {
    id
    commentCount
    repository {
      full_name
      html_url
      owner {
        avatar_url
      }
    }
  }
}
    \`;

export const useTestQuery = <
      TData = TestQuery,
      TError = unknown
    >(
      dataSource: { endpoint: string, fetchParams?: RequestInit },
      variables?: TestQueryVariables,
      options?: UseQueryOptions<TestQuery, TError, TData>
    ) => {
    
    return useQuery<TestQuery, TError, TData>(
      variables === undefined ? ['test'] : ['test', variables],
      fetcher<TestQuery, TestQueryVariables>(dataSource.endpoint, dataSource.fetchParams || {}, TestDocument, variables),
      options
    )};

useTestQuery.getKey = (variables?: TestQueryVariables) => variables === undefined ? ['test'] : ['test', variables];

export const TestDocument = \`
    mutation test($name: String) {
  submitRepository(repoFullName: $name) {
    id
  }
}
    \`;

export const useTestMutation = <
      TError = unknown,
      TContext = unknown
    >(
      dataSource: { endpoint: string, fetchParams?: RequestInit },
      options?: UseMutationOptions<TestMutation, TError, TestMutationVariables, TContext>
    ) => {
    
    return useMutation<TestMutation, TError, TestMutationVariables, TContext>(
      ['test'],
      (variables?: TestMutationVariables) => fetcher<TestMutation, TestMutationVariables>(dataSource.endpoint, dataSource.fetchParams || {}, TestDocument, variables)(),
      options
    )};
"
`;

exports[`React-Query exposeQueryKeys: true, addInfiniteQuery: true Should generate getKey for each query - also infinite queries 1`] = `
"

export const TestDocument = \`
    query test {
  feed {
    id
    commentCount
    repository {
      full_name
      html_url
      owner {
        avatar_url
      }
    }
  }
}
    \`;

export const useTestQuery = <
      TData = TestQuery,
      TError = unknown
    >(
      dataSource: { endpoint: string, fetchParams?: RequestInit },
      variables?: TestQueryVariables,
      options?: UseQueryOptions<TestQuery, TError, TData>
    ) => {
    
    return useQuery<TestQuery, TError, TData>(
      variables === undefined ? ['test'] : ['test', variables],
      fetcher<TestQuery, TestQueryVariables>(dataSource.endpoint, dataSource.fetchParams || {}, TestDocument, variables),
      options
    )};

useTestQuery.getKey = (variables?: TestQueryVariables) => variables === undefined ? ['test'] : ['test', variables];

export const useInfiniteTestQuery = <
      TData = TestQuery,
      TError = unknown
    >(
      dataSource: { endpoint: string, fetchParams?: RequestInit },
      variables?: TestQueryVariables,
      options?: UseInfiniteQueryOptions<TestQuery, TError, TData>
    ) => {
    
    return useInfiniteQuery<TestQuery, TError, TData>(
      variables === undefined ? ['test.infinite'] : ['test.infinite', variables],
      (metaData) => fetcher<TestQuery, TestQueryVariables>(dataSource.endpoint, dataSource.fetchParams || {}, TestDocument, {...variables, ...(metaData.pageParam ?? {})})(),
      options
    )};

useInfiniteTestQuery.getKey = (variables?: TestQueryVariables) => variables === undefined ? ['test.infinite'] : ['test.infinite', variables];

export const TestDocument = \`
    mutation test($name: String) {
  submitRepository(repoFullName: $name) {
    id
  }
}
    \`;

export const useTestMutation = <
      TError = unknown,
      TContext = unknown
    >(
      dataSource: { endpoint: string, fetchParams?: RequestInit },
      options?: UseMutationOptions<TestMutation, TError, TestMutationVariables, TContext>
    ) => {
    
    return useMutation<TestMutation, TError, TestMutationVariables, TContext>(
      ['test'],
      (variables?: TestMutationVariables) => fetcher<TestMutation, TestMutationVariables>(dataSource.endpoint, dataSource.fetchParams || {}, TestDocument, variables)(),
      options
    )};
"
`;

exports[`React-Query exposeQueryRootKeys: true Should generate rootKey for each query 1`] = `
"

export const TestDocument = \`
    query test {
  feed {
    id
    commentCount
    repository {
      full_name
      html_url
      owner {
        avatar_url
      }
    }
  }
}
    \`;

export const useTestQuery = <
      TData = TestQuery,
      TError = unknown
    >(
      dataSource: { endpoint: string, fetchParams?: RequestInit },
      variables?: TestQueryVariables,
      options?: UseQueryOptions<TestQuery, TError, TData>
    ) => {
    
    return useQuery<TestQuery, TError, TData>(
      variables === undefined ? ['test'] : ['test', variables],
      fetcher<TestQuery, TestQueryVariables>(dataSource.endpoint, dataSource.fetchParams || {}, TestDocument, variables),
      options
    )};

useTestQuery.rootKey = 'test';

export const TestDocument = \`
    mutation test($name: String) {
  submitRepository(repoFullName: $name) {
    id
  }
}
    \`;

export const useTestMutation = <
      TError = unknown,
      TContext = unknown
    >(
      dataSource: { endpoint: string, fetchParams?: RequestInit },
      options?: UseMutationOptions<TestMutation, TError, TestMutationVariables, TContext>
    ) => {
    
    return useMutation<TestMutation, TError, TestMutationVariables, TContext>(
      ['test'],
      (variables?: TestMutationVariables) => fetcher<TestMutation, TestMutationVariables>(dataSource.endpoint, dataSource.fetchParams || {}, TestDocument, variables)(),
      options
    )};
"
`;

exports[`React-Query exposeQueryRootKeys: true, addInfiniteQuery: true Should generate rootKey for each query - also infinite queries 1`] = `
"

export const TestDocument = \`
    query test {
  feed {
    id
    commentCount
    repository {
      full_name
      html_url
      owner {
        avatar_url
      }
    }
  }
}
    \`;

export const useTestQuery = <
      TData = TestQuery,
      TError = unknown
    >(
      dataSource: { endpoint: string, fetchParams?: RequestInit },
      variables?: TestQueryVariables,
      options?: UseQueryOptions<TestQuery, TError, TData>
    ) => {
    
    return useQuery<TestQuery, TError, TData>(
      variables === undefined ? ['test'] : ['test', variables],
      fetcher<TestQuery, TestQueryVariables>(dataSource.endpoint, dataSource.fetchParams || {}, TestDocument, variables),
      options
    )};

useTestQuery.rootKey = 'test';

export const useInfiniteTestQuery = <
      TData = TestQuery,
      TError = unknown
    >(
      dataSource: { endpoint: string, fetchParams?: RequestInit },
      variables?: TestQueryVariables,
      options?: UseInfiniteQueryOptions<TestQuery, TError, TData>
    ) => {
    
    return useInfiniteQuery<TestQuery, TError, TData>(
      variables === undefined ? ['test.infinite'] : ['test.infinite', variables],
      (metaData) => fetcher<TestQuery, TestQueryVariables>(dataSource.endpoint, dataSource.fetchParams || {}, TestDocument, {...variables, ...(metaData.pageParam ?? {})})(),
      options
    )};

useInfiniteTestQuery.rootKey = 'test.infinite';

export const TestDocument = \`
    mutation test($name: String) {
  submitRepository(repoFullName: $name) {
    id
  }
}
    \`;

export const useTestMutation = <
      TError = unknown,
      TContext = unknown
    >(
      dataSource: { endpoint: string, fetchParams?: RequestInit },
      options?: UseMutationOptions<TestMutation, TError, TestMutationVariables, TContext>
    ) => {
    
    return useMutation<TestMutation, TError, TestMutationVariables, TContext>(
      ['test'],
      (variables?: TestMutationVariables) => fetcher<TestMutation, TestMutationVariables>(dataSource.endpoint, dataSource.fetchParams || {}, TestDocument, variables)(),
      options
    )};
"
`;

exports[`React-Query fetcher: custom-mapper Should generate mutation correctly with lazy variables: content 1`] = `
"

export const TestDocument = \`
    query test {
  feed {
    id
    commentCount
    repository {
      full_name
      html_url
      owner {
        avatar_url
      }
    }
  }
}
    \`;

export const useTestQuery = <
      TData = TTestQuery,
      TError = unknown
    >(
      variables?: TTestQueryVariables,
      options?: UseQueryOptions<TTestQuery, TError, TData>
    ) => {
    
    return useQuery<TTestQuery, TError, TData>(
      variables === undefined ? ['test'] : ['test', variables],
      useCustomFetcher<TTestQuery, TTestQueryVariables>(TestDocument).bind(null, variables),
      options
    )};

export const useInfiniteTestQuery = <
      TData = TTestQuery,
      TError = unknown
    >(
      variables?: TTestQueryVariables,
      options?: UseInfiniteQueryOptions<TTestQuery, TError, TData>
    ) => {
    const query = useCustomFetcher<TTestQuery, TTestQueryVariables>(TestDocument)
    return useInfiniteQuery<TTestQuery, TError, TData>(
      variables === undefined ? ['test.infinite'] : ['test.infinite', variables],
      (metaData) => query({...variables, ...(metaData.pageParam ?? {})}),
      options
    )};

export const TestDocument = \`
    mutation test($name: String) {
  submitRepository(repoFullName: $name) {
    id
  }
}
    \`;

export const useTestMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<TTestMutation, TError, TTestMutationVariables, TContext>) => {
    
    return useMutation<TTestMutation, TError, TTestMutationVariables, TContext>(
      ['test'],
      useCustomFetcher<TTestMutation, TTestMutationVariables>(TestDocument),
      options
    )};
"
`;

exports[`React-Query fetcher: custom-mapper Should generate mutation correctly with lazy variables: prepend 1`] = `
[
  "import { useQuery, useInfiniteQuery, useMutation, UseQueryOptions, UseInfiniteQueryOptions, UseMutationOptions } from 'react-query';",
  "import { useCustomFetcher } from './my-file';",
]
`;

exports[`React-Query fetcher: custom-mapper Should generate query correctly with external mapper: content 1`] = `
"

export const TestDocument = \`
    query test {
  feed {
    id
    commentCount
    repository {
      full_name
      html_url
      owner {
        avatar_url
      }
    }
  }
}
    \`;

export const useTestQuery = <
      TData = TTestQuery,
      TError = unknown
    >(
      variables?: TTestQueryVariables,
      options?: UseQueryOptions<TTestQuery, TError, TData>
    ) => {
    
    return useQuery<TTestQuery, TError, TData>(
      variables === undefined ? ['test'] : ['test', variables],
      myCustomFetcher<TTestQuery, TTestQueryVariables>(TestDocument, variables),
      options
    )};

export const useInfiniteTestQuery = <
      TData = TTestQuery,
      TError = unknown
    >(
      variables?: TTestQueryVariables,
      options?: UseInfiniteQueryOptions<TTestQuery, TError, TData>
    ) => {
    
    return useInfiniteQuery<TTestQuery, TError, TData>(
      variables === undefined ? ['test.infinite'] : ['test.infinite', variables],
      (metaData) => myCustomFetcher<TTestQuery, TTestQueryVariables>(TestDocument, {...variables, ...(metaData.pageParam ?? {})})(),
      options
    )};

export const TestDocument = \`
    mutation test($name: String) {
  submitRepository(repoFullName: $name) {
    id
  }
}
    \`;

export const useTestMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<TTestMutation, TError, TTestMutationVariables, TContext>) => {
    
    return useMutation<TTestMutation, TError, TTestMutationVariables, TContext>(
      ['test'],
      (variables?: TTestMutationVariables) => myCustomFetcher<TTestMutation, TTestMutationVariables>(TestDocument, variables)(),
      options
    )};
"
`;

exports[`React-Query fetcher: custom-mapper Should generate query correctly with external mapper: prepend 1`] = `
[
  "import { useQuery, useInfiniteQuery, useMutation, UseQueryOptions, UseInfiniteQueryOptions, UseMutationOptions } from 'react-query';",
  "import { myCustomFetcher } from './my-file';",
]
`;

exports[`React-Query fetcher: custom-mapper Should generate query correctly with internal mapper: content 1`] = `
"

export const TestDocument = \`
    query test {
  feed {
    id
    commentCount
    repository {
      full_name
      html_url
      owner {
        avatar_url
      }
    }
  }
}
    \`;

export const useTestQuery = <
      TData = TTestQuery,
      TError = unknown
    >(
      variables?: TTestQueryVariables,
      options?: UseQueryOptions<TTestQuery, TError, TData>
    ) => {
    
    return useQuery<TTestQuery, TError, TData>(
      variables === undefined ? ['test'] : ['test', variables],
      myCustomFetcher<TTestQuery, TTestQueryVariables>(TestDocument, variables),
      options
    )};

export const TestDocument = \`
    mutation test($name: String) {
  submitRepository(repoFullName: $name) {
    id
  }
}
    \`;

export const useTestMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<TTestMutation, TError, TTestMutationVariables, TContext>) => {
    
    return useMutation<TTestMutation, TError, TTestMutationVariables, TContext>(
      ['test'],
      (variables?: TTestMutationVariables) => myCustomFetcher<TTestMutation, TTestMutationVariables>(TestDocument, variables)(),
      options
    )};
"
`;

exports[`React-Query fetcher: custom-mapper Should generate query correctly with internal mapper: prepend 1`] = `
[
  "import { useQuery, useMutation, UseQueryOptions, UseMutationOptions } from 'react-query';",
  null,
]
`;

exports[`React-Query fetcher: fetch Should generate query and mutation correctly: content 1`] = `
"

export const TestDocument = \`
    query test {
  feed {
    id
    commentCount
    repository {
      full_name
      html_url
      owner {
        avatar_url
      }
    }
  }
}
    \`;

export const useTestQuery = <
      TData = TTestQuery,
      TError = unknown
    >(
      dataSource: { endpoint: string, fetchParams?: RequestInit },
      variables?: TTestQueryVariables,
      options?: UseQueryOptions<TTestQuery, TError, TData>
    ) => {
    
    return useQuery<TTestQuery, TError, TData>(
      variables === undefined ? ['test'] : ['test', variables],
      fetcher<TTestQuery, TTestQueryVariables>(dataSource.endpoint, dataSource.fetchParams || {}, TestDocument, variables),
      options
    )};

export const TestDocument = \`
    mutation test($name: String) {
  submitRepository(repoFullName: $name) {
    id
  }
}
    \`;

export const useTestMutation = <
      TError = unknown,
      TContext = unknown
    >(
      dataSource: { endpoint: string, fetchParams?: RequestInit },
      options?: UseMutationOptions<TTestMutation, TError, TTestMutationVariables, TContext>
    ) => {
    
    return useMutation<TTestMutation, TError, TTestMutationVariables, TContext>(
      ['test'],
      (variables?: TTestMutationVariables) => fetcher<TTestMutation, TTestMutationVariables>(dataSource.endpoint, dataSource.fetchParams || {}, TestDocument, variables)(),
      options
    )};
"
`;

exports[`React-Query fetcher: fetch Should generate query and mutation correctly: prepend 1`] = `
[
  "import { useQuery, useMutation, UseQueryOptions, UseMutationOptions } from 'react-query';",
  "
function fetcher<TData, TVariables>(endpoint: string, requestInit: RequestInit, query: string, variables?: TVariables) {
  return async (): Promise<TData> => {
    const res = await fetch(endpoint, {
      method: 'POST',
      ...requestInit,
      body: JSON.stringify({ query, variables }),
    });

    const json = await res.json();

    if (json.errors) {
      const { message } = json.errors[0];

      throw new Error(message);
    }

    return json.data;
  }
}",
]
`;

exports[`React-Query fetcher: graphql-request Should generate query correctly with client: content 1`] = `
"

export const TestDocument = \`
    query test {
  feed {
    id
    commentCount
    repository {
      full_name
      html_url
      owner {
        avatar_url
      }
    }
  }
}
    \`;

export const useTestQuery = <
      TData = TTestQuery,
      TError = unknown
    >(
      client: GraphQLClient,
      variables?: TTestQueryVariables,
      options?: UseQueryOptions<TTestQuery, TError, TData>,
      headers?: RequestInit['headers']
    ) => {
    
    return useQuery<TTestQuery, TError, TData>(
      variables === undefined ? ['test'] : ['test', variables],
      fetcher<TTestQuery, TTestQueryVariables>(client, TestDocument, variables, headers),
      options
    )};

export const useInfiniteTestQuery = <
      TData = TTestQuery,
      TError = unknown
    >(
      client: GraphQLClient,
      variables?: TTestQueryVariables,
      options?: UseInfiniteQueryOptions<TTestQuery, TError, TData>,
      headers?: RequestInit['headers']
    ) => {
    
    return useInfiniteQuery<TTestQuery, TError, TData>(
      variables === undefined ? ['test.infinite'] : ['test.infinite', variables],
      (metaData) => fetcher<TTestQuery, TTestQueryVariables>(client, TestDocument, {...variables, ...(metaData.pageParam ?? {})}, headers)(),
      options
    )};

export const TestDocument = \`
    mutation test($name: String) {
  submitRepository(repoFullName: $name) {
    id
  }
}
    \`;

export const useTestMutation = <
      TError = unknown,
      TContext = unknown
    >(
      client: GraphQLClient,
      options?: UseMutationOptions<TTestMutation, TError, TTestMutationVariables, TContext>,
      headers?: RequestInit['headers']
    ) => {
    
    return useMutation<TTestMutation, TError, TTestMutationVariables, TContext>(
      ['test'],
      (variables?: TTestMutationVariables) => fetcher<TTestMutation, TTestMutationVariables>(client, TestDocument, variables, headers)(),
      options
    )};
"
`;

exports[`React-Query fetcher: graphql-request Should generate query correctly with client: prepend 1`] = `
[
  "import { GraphQLClient } from 'graphql-request';",
  "import { RequestInit } from 'graphql-request/dist/types.dom';",
  "import { useQuery, useInfiniteQuery, useMutation, UseQueryOptions, UseInfiniteQueryOptions, UseMutationOptions } from 'react-query';",
  "
function fetcher<TData, TVariables extends { [key: string]: any }>(client: GraphQLClient, query: string, variables?: TVariables, requestHeaders?: RequestInit['headers']) {
  return async (): Promise<TData> => client.request({
    document: query,
    variables,
    requestHeaders
  });
}",
]
`;

exports[`React-Query fetcher: graphql-request with clientImportPath Should generate query correctly with client: content 1`] = `
"

export const TestDocument = \`
    query test {
  feed {
    id
    commentCount
    repository {
      full_name
      html_url
      owner {
        avatar_url
      }
    }
  }
}
    \`;

export const useTestQuery = <
      TData = TTestQuery,
      TError = unknown
    >(
      variables?: TTestQueryVariables,
      options?: UseQueryOptions<TTestQuery, TError, TData>,
      headers?: RequestInit['headers']
    ) => {
    
    return useQuery<TTestQuery, TError, TData>(
      variables === undefined ? ['test'] : ['test', variables],
      fetcher<TTestQuery, TTestQueryVariables>(TestDocument, variables, headers),
      options
    )};

export const TestDocument = \`
    mutation test($name: String) {
  submitRepository(repoFullName: $name) {
    id
  }
}
    \`;

export const useTestMutation = <
      TError = unknown,
      TContext = unknown
    >(
      options?: UseMutationOptions<TTestMutation, TError, TTestMutationVariables, TContext>,
      headers?: RequestInit['headers']
    ) => {
    
    return useMutation<TTestMutation, TError, TTestMutationVariables, TContext>(
      ['test'],
      (variables?: TTestMutationVariables) => fetcher<TTestMutation, TTestMutationVariables>(TestDocument, variables, headers)(),
      options
    )};
"
`;

exports[`React-Query fetcher: graphql-request with clientImportPath Should generate query correctly with client: prepend 1`] = `
[
  "import { client as graphqlClient } from 'client.ts';",
  "import { GraphQLClient } from 'graphql-request';",
  "import { RequestInit } from 'graphql-request/dist/types.dom';",
  "import { useQuery, useMutation, UseQueryOptions, UseMutationOptions } from 'react-query';",
  "
function fetcher<TData, TVariables extends { [key: string]: any }>(query: string, variables?: TVariables, requestHeaders?: RequestInit['headers']) {
  return async (): Promise<TData> => graphqlClient.request({
    document: query,
    variables,
    requestHeaders
  });
}",
]
`;

exports[`React-Query fetcher: hardcoded-fetch Should generate query correctly with fetch config and fetchParams object: content 1`] = `
"

export const TestDocument = \`
    query test {
  feed {
    id
    commentCount
    repository {
      full_name
      html_url
      owner {
        avatar_url
      }
    }
  }
}
    \`;

export const useTestQuery = <
      TData = TTestQuery,
      TError = unknown
    >(
      variables?: TTestQueryVariables,
      options?: UseQueryOptions<TTestQuery, TError, TData>
    ) => {
    
    return useQuery<TTestQuery, TError, TData>(
      variables === undefined ? ['test'] : ['test', variables],
      fetcher<TTestQuery, TTestQueryVariables>(TestDocument, variables),
      options
    )};

export const TestDocument = \`
    mutation test($name: String) {
  submitRepository(repoFullName: $name) {
    id
  }
}
    \`;

export const useTestMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<TTestMutation, TError, TTestMutationVariables, TContext>) => {
    
    return useMutation<TTestMutation, TError, TTestMutationVariables, TContext>(
      ['test'],
      (variables?: TTestMutationVariables) => fetcher<TTestMutation, TTestMutationVariables>(TestDocument, variables)(),
      options
    )};
"
`;

exports[`React-Query fetcher: hardcoded-fetch Should generate query correctly with fetch config and fetchParams object: prepend 1`] = `
[
  "import { useQuery, useMutation, UseQueryOptions, UseMutationOptions } from '@tanstack/react-query';",
  "
function fetcher<TData, TVariables>(query: string, variables?: TVariables) {
  return async (): Promise<TData> => {
    const res = await fetch("http://localhost:3000/graphql", {
    method: "POST",
    ...({"headers":{"Authorization":"Bearer XYZ"}}),
      body: JSON.stringify({ query, variables }),
    });

    const json = await res.json();

    if (json.errors) {
      const { message } = json.errors[0];

      throw new Error(message);
    }

    return json.data;
  }
}",
]
`;

exports[`React-Query fetcher: hardcoded-fetch Should generate query correctly with fetch config: content 1`] = `
"

export const TestDocument = \`
    query test {
  feed {
    id
    commentCount
    repository {
      full_name
      html_url
      owner {
        avatar_url
      }
    }
  }
}
    \`;

export const useTestQuery = <
      TData = TTestQuery,
      TError = unknown
    >(
      variables?: TTestQueryVariables,
      options?: UseQueryOptions<TTestQuery, TError, TData>
    ) => {
    
    return useQuery<TTestQuery, TError, TData>(
      variables === undefined ? ['test'] : ['test', variables],
      fetcher<TTestQuery, TTestQueryVariables>(TestDocument, variables),
      options
    )};

export const TestDocument = \`
    mutation test($name: String) {
  submitRepository(repoFullName: $name) {
    id
  }
}
    \`;

export const useTestMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<TTestMutation, TError, TTestMutationVariables, TContext>) => {
    
    return useMutation<TTestMutation, TError, TTestMutationVariables, TContext>(
      ['test'],
      (variables?: TTestMutationVariables) => fetcher<TTestMutation, TTestMutationVariables>(TestDocument, variables)(),
      options
    )};
"
`;

exports[`React-Query fetcher: hardcoded-fetch Should generate query correctly with fetch config: prepend 1`] = `
[
  "import { useQuery, useMutation, UseQueryOptions, UseMutationOptions } from '@tanstack/react-query';",
  "
function fetcher<TData, TVariables>(query: string, variables?: TVariables) {
  return async (): Promise<TData> => {
    const res = await fetch("http://localhost:3000/graphql", {
    method: "POST",
    ...({"headers":{"Authorization":"Bearer XYZ"}}),
      body: JSON.stringify({ query, variables }),
    });

    const json = await res.json();

    if (json.errors) {
      const { message } = json.errors[0];

      throw new Error(message);
    }

    return json.data;
  }
}",
]
`;

exports[`React-Query fetcher: hardcoded-fetch Should generate query correctly with hardcoded endpoint from env var: content 1`] = `
"

export const TestDocument = \`
    query test {
  feed {
    id
    commentCount
    repository {
      full_name
      html_url
      owner {
        avatar_url
      }
    }
  }
}
    \`;

export const useTestQuery = <
      TData = TTestQuery,
      TError = unknown
    >(
      variables?: TTestQueryVariables,
      options?: UseQueryOptions<TTestQuery, TError, TData>
    ) => {
    
    return useQuery<TTestQuery, TError, TData>(
      variables === undefined ? ['test'] : ['test', variables],
      fetcher<TTestQuery, TTestQueryVariables>(TestDocument, variables),
      options
    )};

export const TestDocument = \`
    mutation test($name: String) {
  submitRepository(repoFullName: $name) {
    id
  }
}
    \`;

export const useTestMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<TTestMutation, TError, TTestMutationVariables, TContext>) => {
    
    return useMutation<TTestMutation, TError, TTestMutationVariables, TContext>(
      ['test'],
      (variables?: TTestMutationVariables) => fetcher<TTestMutation, TTestMutationVariables>(TestDocument, variables)(),
      options
    )};
"
`;

exports[`React-Query fetcher: hardcoded-fetch Should generate query correctly with hardcoded endpoint from env var: prepend 1`] = `
[
  "import { useQuery, useMutation, UseQueryOptions, UseMutationOptions } from '@tanstack/react-query';",
  "
function fetcher<TData, TVariables>(query: string, variables?: TVariables) {
  return async (): Promise<TData> => {
    const res = await fetch(process.env.ENDPOINT_URL as string, {
    method: "POST",
      body: JSON.stringify({ query, variables }),
    });

    const json = await res.json();

    if (json.errors) {
      const { message } = json.errors[0];

      throw new Error(message);
    }

    return json.data;
  }
}",
]
`;

exports[`React-Query fetcher: hardcoded-fetch Should generate query correctly with hardcoded endpoint from just identifier: content 1`] = `
"

export const TestDocument = \`
    query test {
  feed {
    id
    commentCount
    repository {
      full_name
      html_url
      owner {
        avatar_url
      }
    }
  }
}
    \`;

export const useTestQuery = <
      TData = TTestQuery,
      TError = unknown
    >(
      variables?: TTestQueryVariables,
      options?: UseQueryOptions<TTestQuery, TError, TData>
    ) => {
    
    return useQuery<TTestQuery, TError, TData>(
      variables === undefined ? ['test'] : ['test', variables],
      fetcher<TTestQuery, TTestQueryVariables>(TestDocument, variables),
      options
    )};

export const TestDocument = \`
    mutation test($name: String) {
  submitRepository(repoFullName: $name) {
    id
  }
}
    \`;

export const useTestMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<TTestMutation, TError, TTestMutationVariables, TContext>) => {
    
    return useMutation<TTestMutation, TError, TTestMutationVariables, TContext>(
      ['test'],
      (variables?: TTestMutationVariables) => fetcher<TTestMutation, TTestMutationVariables>(TestDocument, variables)(),
      options
    )};
"
`;

exports[`React-Query fetcher: hardcoded-fetch Should generate query correctly with hardcoded endpoint from just identifier: prepend 1`] = `
[
  "import { useQuery, useMutation, UseQueryOptions, UseMutationOptions } from '@tanstack/react-query';",
  "
function fetcher<TData, TVariables>(query: string, variables?: TVariables) {
  return async (): Promise<TData> => {
    const res = await fetch(myEndpoint as string, {
    method: "POST",
      body: JSON.stringify({ query, variables }),
    });

    const json = await res.json();

    if (json.errors) {
      const { message } = json.errors[0];

      throw new Error(message);
    }

    return json.data;
  }
}",
]
`;

exports[`React-Query fetcher: hardcoded-fetch Should generate query correctly with hardcoded endpoint: content 1`] = `
"

export const TestDocument = \`
    query test {
  feed {
    id
    commentCount
    repository {
      full_name
      html_url
      owner {
        avatar_url
      }
    }
  }
}
    \`;

export const useTestQuery = <
      TData = TTestQuery,
      TError = unknown
    >(
      variables?: TTestQueryVariables,
      options?: UseQueryOptions<TTestQuery, TError, TData>
    ) => {
    
    return useQuery<TTestQuery, TError, TData>(
      variables === undefined ? ['test'] : ['test', variables],
      fetcher<TTestQuery, TTestQueryVariables>(TestDocument, variables),
      options
    )};

export const useInfiniteTestQuery = <
      TData = TTestQuery,
      TError = unknown
    >(
      variables?: TTestQueryVariables,
      options?: UseInfiniteQueryOptions<TTestQuery, TError, TData>
    ) => {
    
    return useInfiniteQuery<TTestQuery, TError, TData>(
      variables === undefined ? ['test.infinite'] : ['test.infinite', variables],
      (metaData) => fetcher<TTestQuery, TTestQueryVariables>(TestDocument, {...variables, ...(metaData.pageParam ?? {})})(),
      options
    )};

export const TestDocument = \`
    mutation test($name: String) {
  submitRepository(repoFullName: $name) {
    id
  }
}
    \`;

export const useTestMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<TTestMutation, TError, TTestMutationVariables, TContext>) => {
    
    return useMutation<TTestMutation, TError, TTestMutationVariables, TContext>(
      ['test'],
      (variables?: TTestMutationVariables) => fetcher<TTestMutation, TTestMutationVariables>(TestDocument, variables)(),
      options
    )};
"
`;

exports[`React-Query fetcher: hardcoded-fetch Should generate query correctly with hardcoded endpoint: prepend 1`] = `
[
  "import { useQuery, useInfiniteQuery, useMutation, UseQueryOptions, UseInfiniteQueryOptions, UseMutationOptions } from 'react-query';",
  "
function fetcher<TData, TVariables>(query: string, variables?: TVariables) {
  return async (): Promise<TData> => {
    const res = await fetch("http://localhost:3000/graphql", {
    method: "POST",
      body: JSON.stringify({ query, variables }),
    });

    const json = await res.json();

    if (json.errors) {
      const { message } = json.errors[0];

      throw new Error(message);
    }

    return json.data;
  }
}",
]
`;

exports[`React-Query reactQueryImportFrom: custom-path Should import react-query from custom path: prepend 1`] = `
[
  "import { useQuery, useMutation, UseQueryOptions, UseMutationOptions } from 'custom-react-query';",
  "
function fetcher<TData, TVariables>(endpoint: string, requestInit: RequestInit, query: string, variables?: TVariables) {
  return async (): Promise<TData> => {
    const res = await fetch(endpoint, {
      method: 'POST',
      ...requestInit,
      body: JSON.stringify({ query, variables }),
    });

    const json = await res.json();

    if (json.errors) {
      const { message } = json.errors[0];

      throw new Error(message);
    }

    return json.data;
  }
}",
]
`;

exports[`React-Query support import-type preset in v4: content 1`] = `
"

export const TestDocument = \`
    query test {
  feed {
    id
    commentCount
    repository {
      full_name
      html_url
      owner {
        avatar_url
      }
    }
  }
}
    \`;

export const useTestQuery = <
      TData = Types.TestQuery,
      TError = unknown
    >(
      dataSource: { endpoint: string, fetchParams?: RequestInit },
      variables?: Types.TestQueryVariables,
      options?: UseQueryOptions<Types.TestQuery, TError, TData>
    ) => {
    
    return useQuery<Types.TestQuery, TError, TData>(
      variables === undefined ? ['test'] : ['test', variables],
      fetcher<Types.TestQuery, Types.TestQueryVariables>(dataSource.endpoint, dataSource.fetchParams || {}, TestDocument, variables),
      options
    )};

export const TestDocument = \`
    mutation test($name: String) {
  submitRepository(repoFullName: $name) {
    id
  }
}
    \`;

export const useTestMutation = <
      TError = unknown,
      TContext = unknown
    >(
      dataSource: { endpoint: string, fetchParams?: RequestInit },
      options?: UseMutationOptions<Types.TestMutation, TError, Types.TestMutationVariables, TContext>
    ) => {
    
    return useMutation<Types.TestMutation, TError, Types.TestMutationVariables, TContext>(
      ['test'],
      (variables?: Types.TestMutationVariables) => fetcher<Types.TestMutation, Types.TestMutationVariables>(dataSource.endpoint, dataSource.fetchParams || {}, TestDocument, variables)(),
      options
    )};
"
`;

exports[`React-Query support import-type preset in v5: content 1`] = `
"

export const TestDocument = \`
    query test {
  feed {
    id
    commentCount
    repository {
      full_name
      html_url
      owner {
        avatar_url
      }
    }
  }
}
    \`;

export const useTestQuery = <
      TData = Types.TestQuery,
      TError = unknown
    >(
      dataSource: { endpoint: string, fetchParams?: RequestInit },
      variables?: Types.TestQueryVariables,
      options?: Omit<UseQueryOptions<Types.TestQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<Types.TestQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<Types.TestQuery, TError, TData>(
      {
    queryKey: variables === undefined ? ['test'] : ['test', variables],
    queryFn: fetcher<Types.TestQuery, Types.TestQueryVariables>(dataSource.endpoint, dataSource.fetchParams || {}, TestDocument, variables),
    ...options
  }
    )};

export const TestDocument = \`
    mutation test($name: String) {
  submitRepository(repoFullName: $name) {
    id
  }
}
    \`;

export const useTestMutation = <
      TError = unknown,
      TContext = unknown
    >(
      dataSource: { endpoint: string, fetchParams?: RequestInit },
      options?: UseMutationOptions<Types.TestMutation, TError, Types.TestMutationVariables, TContext>
    ) => {
    
    return useMutation<Types.TestMutation, TError, Types.TestMutationVariables, TContext>(
      {
    mutationKey: ['test'],
    mutationFn: (variables?: Types.TestMutationVariables) => fetcher<Types.TestMutation, Types.TestMutationVariables>(dataSource.endpoint, dataSource.fetchParams || {}, TestDocument, variables)(),
    ...options
  }
    )};
"
`;

exports[`React-Query support v4 syntax: content 1`] = `
"

export const TestDocument = \`
    query test {
  feed {
    id
    commentCount
    repository {
      full_name
      html_url
      owner {
        avatar_url
      }
    }
  }
}
    \`;

export const useTestQuery = <
      TData = TestQuery,
      TError = unknown
    >(
      dataSource: { endpoint: string, fetchParams?: RequestInit },
      variables?: TestQueryVariables,
      options?: UseQueryOptions<TestQuery, TError, TData>
    ) => {
    
    return useQuery<TestQuery, TError, TData>(
      variables === undefined ? ['test'] : ['test', variables],
      fetcher<TestQuery, TestQueryVariables>(dataSource.endpoint, dataSource.fetchParams || {}, TestDocument, variables),
      options
    )};

export const useInfiniteTestQuery = <
      TData = TestQuery,
      TError = unknown
    >(
      dataSource: { endpoint: string, fetchParams?: RequestInit },
      variables?: TestQueryVariables,
      options?: UseInfiniteQueryOptions<TestQuery, TError, TData>
    ) => {
    
    return useInfiniteQuery<TestQuery, TError, TData>(
      variables === undefined ? ['test.infinite'] : ['test.infinite', variables],
      (metaData) => fetcher<TestQuery, TestQueryVariables>(dataSource.endpoint, dataSource.fetchParams || {}, TestDocument, {...variables, ...(metaData.pageParam ?? {})})(),
      options
    )};

export const TestDocument = \`
    mutation test($name: String) {
  submitRepository(repoFullName: $name) {
    id
  }
}
    \`;

export const useTestMutation = <
      TError = unknown,
      TContext = unknown
    >(
      dataSource: { endpoint: string, fetchParams?: RequestInit },
      options?: UseMutationOptions<TestMutation, TError, TestMutationVariables, TContext>
    ) => {
    
    return useMutation<TestMutation, TError, TestMutationVariables, TContext>(
      ['test'],
      (variables?: TestMutationVariables) => fetcher<TestMutation, TestMutationVariables>(dataSource.endpoint, dataSource.fetchParams || {}, TestDocument, variables)(),
      options
    )};
"
`;

exports[`React-Query support v4 syntax: prepend 1`] = `
[
  "import { useQuery, useInfiniteQuery, useMutation, type UseQueryOptions, type UseInfiniteQueryOptions, type UseMutationOptions } from '@tanstack/react-query';",
  "
function fetcher<TData, TVariables>(endpoint: string, requestInit: RequestInit, query: string, variables?: TVariables) {
  return async (): Promise<TData> => {
    const res = await fetch(endpoint, {
      method: 'POST',
      ...requestInit,
      body: JSON.stringify({ query, variables }),
    });

    const json = await res.json();

    if (json.errors) {
      const { message } = json.errors[0];

      throw new Error(message);
    }

    return json.data;
  }
}",
]
`;

exports[`React-Query support v5 syntax: content 1`] = `
"

export const TestDocument = \`
    query test {
  feed {
    id
    commentCount
    repository {
      full_name
      html_url
      owner {
        avatar_url
      }
    }
  }
}
    \`;

export const useTestQuery = <
      TData = TestQuery,
      TError = unknown
    >(
      dataSource: { endpoint: string, fetchParams?: RequestInit },
      variables?: TestQueryVariables,
      options?: Omit<UseQueryOptions<TestQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<TestQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<TestQuery, TError, TData>(
      {
    queryKey: variables === undefined ? ['test'] : ['test', variables],
    queryFn: fetcher<TestQuery, TestQueryVariables>(dataSource.endpoint, dataSource.fetchParams || {}, TestDocument, variables),
    ...options
  }
    )};

export const useSuspenseTestQuery = <
      TData = TestQuery,
      TError = unknown
    >(
      dataSource: { endpoint: string, fetchParams?: RequestInit },
      variables?: TestQueryVariables,
      options?: Omit<UseSuspenseQueryOptions<TestQuery, TError, TData>, 'queryKey'> & { queryKey?: UseSuspenseQueryOptions<TestQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useSuspenseQuery<TestQuery, TError, TData>(
      {
    queryKey: variables === undefined ? ['testSuspense'] : ['testSuspense', variables],
    queryFn: fetcher<TestQuery, TestQueryVariables>(dataSource.endpoint, dataSource.fetchParams || {}, TestDocument, variables),
    ...options
  }
    )};

export const useInfiniteTestQuery = <
      TData = InfiniteData<TestQuery>,
      TError = unknown
    >(
      dataSource: { endpoint: string, fetchParams?: RequestInit },
      variables: TestQueryVariables,
      options: Omit<UseInfiniteQueryOptions<TestQuery, TError, TData>, 'queryKey'> & { queryKey?: UseInfiniteQueryOptions<TestQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useInfiniteQuery<TestQuery, TError, TData>(
      (() => {
    const { queryKey: optionsQueryKey, ...restOptions } = options;
    return {
      queryKey: optionsQueryKey ?? variables === undefined ? ['test.infinite'] : ['test.infinite', variables],
      queryFn: (metaData) => fetcher<TestQuery, TestQueryVariables>(dataSource.endpoint, dataSource.fetchParams || {}, TestDocument, {...variables, ...(metaData.pageParam ?? {})})(),
      ...restOptions
    }
  })()
    )};

export const useSuspenseInfiniteTestQuery = <
      TData = InfiniteData<TestQuery>,
      TError = unknown
    >(
      dataSource: { endpoint: string, fetchParams?: RequestInit },
      variables: TestQueryVariables,
      options: Omit<UseSuspenseInfiniteQueryOptions<TestQuery, TError, TData>, 'queryKey'> & { queryKey?: UseSuspenseInfiniteQueryOptions<TestQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useSuspenseInfiniteQuery<TestQuery, TError, TData>(
      (() => {
    const { queryKey: optionsQueryKey, ...restOptions } = options;
    return {
      queryKey: optionsQueryKey ?? variables === undefined ? ['test.infiniteSuspense'] : ['test.infiniteSuspense', variables],
      queryFn: (metaData) => fetcher<TestQuery, TestQueryVariables>(dataSource.endpoint, dataSource.fetchParams || {}, TestDocument, {...variables, ...(metaData.pageParam ?? {})})(),
      ...restOptions
    }
  })()
    )};

export const TestDocument = \`
    mutation test($name: String) {
  submitRepository(repoFullName: $name) {
    id
  }
}
    \`;

export const useTestMutation = <
      TError = unknown,
      TContext = unknown
    >(
      dataSource: { endpoint: string, fetchParams?: RequestInit },
      options?: UseMutationOptions<TestMutation, TError, TestMutationVariables, TContext>
    ) => {
    
    return useMutation<TestMutation, TError, TestMutationVariables, TContext>(
      {
    mutationKey: ['test'],
    mutationFn: (variables?: TestMutationVariables) => fetcher<TestMutation, TestMutationVariables>(dataSource.endpoint, dataSource.fetchParams || {}, TestDocument, variables)(),
    ...options
  }
    )};
"
`;

exports[`React-Query support v5 syntax: prepend 1`] = `
[
  "import { useQuery, useSuspenseQuery, useInfiniteQuery, useSuspenseInfiniteQuery, useMutation, UseQueryOptions, UseSuspenseQueryOptions, UseInfiniteQueryOptions, InfiniteData, UseSuspenseInfiniteQueryOptions, UseMutationOptions } from '@tanstack/react-query';",
  "
function fetcher<TData, TVariables>(endpoint: string, requestInit: RequestInit, query: string, variables?: TVariables) {
  return async (): Promise<TData> => {
    const res = await fetch(endpoint, {
      method: 'POST',
      ...requestInit,
      body: JSON.stringify({ query, variables }),
    });

    const json = await res.json();

    if (json.errors) {
      const { message } = json.errors[0];

      throw new Error(message);
    }

    return json.data;
  }
}",
]
`;
